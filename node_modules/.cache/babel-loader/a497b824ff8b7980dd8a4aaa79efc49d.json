{"ast":null,"code":"import { ethers } from \"ethers\";\nimport Web3 from \"web3\";\n\nconst poolContract = require(\"../abi/pool.json\");\n\nconst ecr20abi = require(\"../abi/erc20.json\");\n\nconst web3 = new Web3(Web3.givenProvider);\n\nconst onLendingSuccess = (hash, callback) => {\n  const onCreateInterval = setInterval(async () => {\n    web3.eth.getTransactionReceipt(hash).then(txReceipt => {\n      if ((txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.status) === true) {\n        clearInterval(onCreateInterval);\n        console.log('true TXRECEIPT', txReceipt);\n        callback({\n          success: true\n        });\n      } else if ((txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.status) === false) {\n        console.log('false TXRECEIPT', txReceipt);\n      }\n    });\n  }, 5000);\n};\n\nexport async function lend(amount, poolAddress, tokenAddress, callback) {\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  let lender = await signer.getAddress();\n  let newAmount = ethers.utils.parseUnits(amount.toString()).toString();\n  var contract = new web3.eth.Contract(poolContract, poolAddress);\n  var erc20contract = new web3.eth.Contract(ecr20abi, tokenAddress);\n  const isAllowed = await erc20contract.methods.allowance(lender, poolAddress).call();\n\n  try {\n    if (isAllowed && Number(isAllowed) >= Number(newAmount)) {\n      await contract.methods.lend(lender, newAmount, false).send({\n        from: lender\n      }, function async(err, res) {\n        if (err) {\n          console.log('LEND ERROR', err);\n          callback({\n            error: true,\n            message: err.message\n          });\n          return;\n        }\n\n        if (res) {\n          console.log('LEND HASH', res);\n          onLendingSuccess(res, callback);\n        }\n      });\n    } else {\n      await erc20contract.methods.approve(poolAddress, newAmount).send({\n        from: lender\n      }, async (error, receipt) => {\n        if (error) {\n          console.log('APPROVE ERROR', error);\n          callback({\n            error: true,\n            message: error.message\n          });\n          return;\n        }\n\n        const interval = setInterval(async () => {\n          web3.eth.getTransactionReceipt(receipt).then(async txReceipt => {\n            if ((txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.status) === true) {\n              clearInterval(interval);\n              await contract.methods.lend(lender, newAmount, false).send({\n                from: lender\n              }, function async(err, res) {\n                if (err) {\n                  console.log('LEND ERROR', err);\n                  callback({\n                    error: true,\n                    message: err.message\n                  });\n                  return;\n                }\n\n                if (res) {\n                  console.log('LEND HASH', res);\n                  onLendingSuccess(res, callback);\n                }\n              });\n            } else if ((txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.status) === false) {\n              console.log('approve false TXRECEIPT', txReceipt);\n            }\n          });\n        }, 5000);\n      });\n    }\n  } catch (error) {\n    if (error.message.includes('User denied transaction')) {\n      callback({\n        error: true,\n        message: error.message\n      });\n    } else {\n      callback({\n        error: true,\n        message: 'Invalid values entered.'\n      });\n    }\n  }\n}","map":{"version":3,"sources":["/Users/ritikdutta/Desktop/sublime-frontend/src/contractTranscations/lend.js"],"names":["ethers","Web3","poolContract","require","ecr20abi","web3","givenProvider","onLendingSuccess","hash","callback","onCreateInterval","setInterval","eth","getTransactionReceipt","then","txReceipt","status","clearInterval","console","log","success","lend","amount","poolAddress","tokenAddress","provider","providers","Web3Provider","window","ethereum","signer","getSigner","lender","getAddress","newAmount","utils","parseUnits","toString","contract","Contract","erc20contract","isAllowed","methods","allowance","call","Number","send","from","async","err","res","error","message","approve","receipt","interval","includes"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,OAAOC,IAAP,MAAiB,MAAjB;;AAEA,MAAMC,YAAY,GAAGC,OAAO,CAAC,kBAAD,CAA5B;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,mBAAD,CAAxB;;AACA,MAAME,IAAI,GAAG,IAAIJ,IAAJ,CAASA,IAAI,CAACK,aAAd,CAAb;;AAEA,MAAMC,gBAAgB,GAAG,CAACC,IAAD,EAAOC,QAAP,KAAoB;AAC3C,QAAMC,gBAAgB,GAAGC,WAAW,CAAC,YAAY;AAC/CN,IAAAA,IAAI,CAACO,GAAL,CAASC,qBAAT,CAA+BL,IAA/B,EAAqCM,IAArC,CAA2CC,SAAD,IAAe;AACvD,UAAI,CAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEC,MAAX,MAAsB,IAA1B,EAAgC;AAC9BC,QAAAA,aAAa,CAACP,gBAAD,CAAb;AAEAQ,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BJ,SAA9B;AACAN,QAAAA,QAAQ,CAAC;AAAEW,UAAAA,OAAO,EAAE;AAAX,SAAD,CAAR;AACD,OALD,MAKO,IAAI,CAAAL,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEC,MAAX,MAAsB,KAA1B,EAAiC;AACtCE,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BJ,SAA/B;AACD;AACF,KATD;AAUD,GAXmC,EAWjC,IAXiC,CAApC;AAYD,CAbD;;AAeA,OAAO,eAAeM,IAAf,CAAoBC,MAApB,EAA4BC,WAA5B,EAAyCC,YAAzC,EAAuDf,QAAvD,EAAgE;AACrE,QAAMgB,QAAQ,GAAG,IAAIzB,MAAM,CAAC0B,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,CAAjB;AACA,QAAMC,MAAM,GAAGL,QAAQ,CAACM,SAAT,EAAf;AACA,MAAIC,MAAM,GAAG,MAAMF,MAAM,CAACG,UAAP,EAAnB;AAEA,MAAIC,SAAS,GAAIlC,MAAM,CAACmC,KAAP,CAAaC,UAAb,CAAwBd,MAAM,CAACe,QAAP,EAAxB,CAAD,CAA6CA,QAA7C,EAAhB;AAEA,MAAIC,QAAQ,GAAG,IAAIjC,IAAI,CAACO,GAAL,CAAS2B,QAAb,CAAsBrC,YAAtB,EAAoCqB,WAApC,CAAf;AACA,MAAIiB,aAAa,GAAG,IAAInC,IAAI,CAACO,GAAL,CAAS2B,QAAb,CAAsBnC,QAAtB,EAAgCoB,YAAhC,CAApB;AAEA,QAAMiB,SAAS,GAAG,MAAMD,aAAa,CAACE,OAAd,CAAsBC,SAAtB,CAAgCX,MAAhC,EAAwCT,WAAxC,EAAqDqB,IAArD,EAAxB;;AAEA,MAAI;AACF,QAAIH,SAAS,IAAII,MAAM,CAACJ,SAAD,CAAN,IAAqBI,MAAM,CAACX,SAAD,CAA5C,EAAyD;AACvD,YAAMI,QAAQ,CAACI,OAAT,CAAiBrB,IAAjB,CAAsBW,MAAtB,EAA8BE,SAA9B,EAAyC,KAAzC,EAAgDY,IAAhD,CAAqD;AAAEC,QAAAA,IAAI,EAAEf;AAAR,OAArD,EAAuE,SAASgB,KAAT,CAAeC,GAAf,EAAoBC,GAApB,EAAyB;AACpG,YAAID,GAAJ,EAAS;AACP/B,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B8B,GAA1B;AACAxC,UAAAA,QAAQ,CAAC;AAAE0C,YAAAA,KAAK,EAAE,IAAT;AAAeC,YAAAA,OAAO,EAAEH,GAAG,CAACG;AAA5B,WAAD,CAAR;AACA;AACD;;AACD,YAAIF,GAAJ,EAAS;AACPhC,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB+B,GAAzB;AACA3C,UAAAA,gBAAgB,CAAC2C,GAAD,EAAMzC,QAAN,CAAhB;AACD;AACF,OAVK,CAAN;AAWD,KAZD,MAYO;AACL,YAAM+B,aAAa,CAACE,OAAd,CAAsBW,OAAtB,CACJ9B,WADI,EAEJW,SAFI,EAGJY,IAHI,CAGC;AAAEC,QAAAA,IAAI,EAAEf;AAAR,OAHD,EAGmB,OAAOmB,KAAP,EAAcG,OAAd,KAA0B;AACjD,YAAIH,KAAJ,EAAW;AACTjC,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BgC,KAA7B;AACA1C,UAAAA,QAAQ,CAAC;AAAE0C,YAAAA,KAAK,EAAE,IAAT;AAAeC,YAAAA,OAAO,EAAED,KAAK,CAACC;AAA9B,WAAD,CAAR;AACA;AACD;;AAED,cAAMG,QAAQ,GAAG5C,WAAW,CAAC,YAAY;AACvCN,UAAAA,IAAI,CAACO,GAAL,CAASC,qBAAT,CAA+ByC,OAA/B,EAAwCxC,IAAxC,CAA6C,MAAOC,SAAP,IAAqB;AAChE,gBAAI,CAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEC,MAAX,MAAsB,IAA1B,EAAgC;AAC9BC,cAAAA,aAAa,CAACsC,QAAD,CAAb;AAEA,oBAAMjB,QAAQ,CAACI,OAAT,CAAiBrB,IAAjB,CAAsBW,MAAtB,EAA8BE,SAA9B,EAAyC,KAAzC,EAAgDY,IAAhD,CAAqD;AAAEC,gBAAAA,IAAI,EAAEf;AAAR,eAArD,EAAuE,SAASgB,KAAT,CAAeC,GAAf,EAAoBC,GAApB,EAAyB;AACpG,oBAAID,GAAJ,EAAS;AACP/B,kBAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B8B,GAA1B;AACAxC,kBAAAA,QAAQ,CAAC;AAAE0C,oBAAAA,KAAK,EAAE,IAAT;AAAeC,oBAAAA,OAAO,EAAEH,GAAG,CAACG;AAA5B,mBAAD,CAAR;AACA;AACD;;AACD,oBAAIF,GAAJ,EAAS;AACPhC,kBAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB+B,GAAzB;AACA3C,kBAAAA,gBAAgB,CAAC2C,GAAD,EAAMzC,QAAN,CAAhB;AACD;AACF,eAVK,CAAN;AAYD,aAfD,MAeO,IAAI,CAAAM,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEC,MAAX,MAAsB,KAA1B,EAAiC;AACtCE,cAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCJ,SAAvC;AACD;AACF,WAnBD;AAoBD,SArB2B,EAqBzB,IArByB,CAA5B;AAsBD,OAhCK,CAAN;AAiCD;AACF,GAhDD,CAgDE,OAAOoC,KAAP,EAAc;AACd,QAAIA,KAAK,CAACC,OAAN,CAAcI,QAAd,CAAuB,yBAAvB,CAAJ,EAAuD;AACrD/C,MAAAA,QAAQ,CAAC;AAAE0C,QAAAA,KAAK,EAAE,IAAT;AAAeC,QAAAA,OAAO,EAAED,KAAK,CAACC;AAA9B,OAAD,CAAR;AACD,KAFD,MAEO;AACL3C,MAAAA,QAAQ,CAAC;AAAE0C,QAAAA,KAAK,EAAE,IAAT;AAAeC,QAAAA,OAAO,EAAE;AAAxB,OAAD,CAAR;AACD;AACF;AACF","sourcesContent":["import { ethers } from \"ethers\";\nimport Web3 from \"web3\"\n\nconst poolContract = require(\"../abi/pool.json\");\nconst ecr20abi = require(\"../abi/erc20.json\");\nconst web3 = new Web3(Web3.givenProvider);\n\nconst onLendingSuccess = (hash, callback) => {\n  const onCreateInterval = setInterval(async () => {\n    web3.eth.getTransactionReceipt(hash).then((txReceipt) => {\n      if (txReceipt?.status === true) {\n        clearInterval(onCreateInterval);\n\n        console.log('true TXRECEIPT', txReceipt);\n        callback({ success: true });\n      } else if (txReceipt?.status === false) {\n        console.log('false TXRECEIPT', txReceipt);\n      }\n    });\n  }, 5000);\n}\n\nexport async function lend(amount, poolAddress, tokenAddress, callback){\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  let lender = await signer.getAddress();\n\n  let newAmount = (ethers.utils.parseUnits(amount.toString())).toString()\n\n  var contract = new web3.eth.Contract(poolContract, poolAddress);\n  var erc20contract = new web3.eth.Contract(ecr20abi, tokenAddress);\n\n  const isAllowed = await erc20contract.methods.allowance(lender, poolAddress).call()\n\n  try {\n    if (isAllowed && Number(isAllowed) >= Number(newAmount)) {\n      await contract.methods.lend(lender, newAmount, false).send({ from: lender }, function async(err, res) {\n        if (err) {\n          console.log('LEND ERROR', err);\n          callback({ error: true, message: err.message });\n          return\n        }\n        if (res) {\n          console.log('LEND HASH', res);\n          onLendingSuccess(res, callback)\n        }\n      })\n    } else {\n      await erc20contract.methods.approve(\n        poolAddress,\n        newAmount\n      ).send({ from: lender }, async (error, receipt) => {\n        if (error) {\n          console.log('APPROVE ERROR', error);\n          callback({ error: true, message: error.message });\n          return\n        }\n  \n        const interval = setInterval(async () => {\n          web3.eth.getTransactionReceipt(receipt).then(async (txReceipt) => {\n            if (txReceipt?.status === true) {\n              clearInterval(interval);\n\n              await contract.methods.lend(lender, newAmount, false).send({ from: lender }, function async(err, res) {\n                if (err) {\n                  console.log('LEND ERROR', err);\n                  callback({ error: true, message: err.message });\n                  return\n                }\n                if (res) {\n                  console.log('LEND HASH', res);\n                  onLendingSuccess(res, callback)\n                }\n              })\n      \n            } else if (txReceipt?.status === false) {\n              console.log('approve false TXRECEIPT', txReceipt);\n            }\n          });\n        }, 5000)\n      });\n    }\n  } catch (error) {\n    if (error.message.includes('User denied transaction')) {\n      callback({ error: true, message: error.message });\n    } else {\n      callback({ error: true, message: 'Invalid values entered.' });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}