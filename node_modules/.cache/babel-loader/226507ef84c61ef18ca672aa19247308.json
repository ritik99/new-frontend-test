{"ast":null,"code":"import request from 'request';\nimport { getLoanStartDay } from './../../utility/time';\nimport { getSymbol } from './../../utility/symbol';\nimport { SUBGRAPH_API_URL } from '../../utility/constants';\nimport { ethers } from 'ethers';\nexport function borrowPools(address, setpoolBorrowData) {\n  let result;\n  const data = JSON.stringify({\n    query: `{\n            users(where:{id:\"${address}\"} ){\n              id\n              borrowingPools {\n                id\n                borrower{\n                    twitterDetails{\n                        twitterId\n                    }\n                }\n                borrowRate\n                borrowAmountRequested\n                loanStatus\n                published\n                loanStartTime\n                lentAmount\n                borrowAsset\n              }\n            }\n        }`\n  });\n  var options = {\n    'method': 'POST',\n    'url': SUBGRAPH_API_URL,\n    'headers': {\n      'Content-Type': 'application/json'\n    },\n    'body': data\n  };\n  result = request(options, async function (error, response) {\n    if (error) {\n      setpoolBorrowData([]);\n      throw new Error(error);\n    }\n\n    ;\n    var body = JSON.parse(response.body);\n    var pools = [];\n\n    if (body) {\n      if (body.data) {\n        if (body.data.users && body.data.users.length > 0) {\n          if (body.data.users[0].borrowingPools) {\n            let poolData = body.data.users[0].borrowingPools;\n\n            for (var i = 0; i < poolData.length; i++) {\n              let name = 'user name';\n\n              try {\n                name = ethers.utils.parseBytes32String(poolData[i].borrower.twitterDetails.twitterId);\n              } catch (error) {}\n\n              var pool = {\n                id: i + 1,\n                avatar: '',\n                name,\n                username: `@${name}`,\n                pool_type: 'Open Borrow',\n                pool_status: poolData[i].loanStatus,\n                created_on: '18th Jan 2021',\n                borrow_rate: poolData[i].borrowRate / 10 ** 8 + '%',\n                borrowed_amount: poolData[i].borrowAmountRequested / 10 ** 18 + ' ' + getSymbol(poolData[i].borrowAsset),\n                progress_and_payment_txt: 'Collection Progress',\n                progress_and_payment: Math.floor(poolData[i].lentAmount * 100 / poolData[i].borrowAmountRequested) + '%',\n                next_payment: '200 DOT',\n                ends_date: getLoanStartDay(poolData[i].loanStartTime),\n                btn_1: 'Provide collateral',\n                btn_2: 'View More',\n                address: poolData[i].id\n              };\n              pools.push(pool);\n            }\n          }\n        }\n      }\n    }\n\n    setpoolBorrowData(pools);\n  });\n}\n;","map":{"version":3,"sources":["/Users/ritikdutta/Desktop/sublime-frontend/src/query/pool/borrowingPools.js"],"names":["request","getLoanStartDay","getSymbol","SUBGRAPH_API_URL","ethers","borrowPools","address","setpoolBorrowData","result","data","JSON","stringify","query","options","error","response","Error","body","parse","pools","users","length","borrowingPools","poolData","i","name","utils","parseBytes32String","borrower","twitterDetails","twitterId","pool","id","avatar","username","pool_type","pool_status","loanStatus","created_on","borrow_rate","borrowRate","borrowed_amount","borrowAmountRequested","borrowAsset","progress_and_payment_txt","progress_and_payment","Math","floor","lentAmount","next_payment","ends_date","loanStartTime","btn_1","btn_2","push"],"mappings":"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","sourcesContent":["import request from 'request'\n\nimport {getLoanStartDay} from './../../utility/time'\nimport {getSymbol} from './../../utility/symbol'\nimport {SUBGRAPH_API_URL} from '../../utility/constants'\nimport {ethers} from 'ethers'\n\nexport function borrowPools(address,setpoolBorrowData){\n\n    let result;\n    const data = JSON.stringify({\n        query: `{\n            users(where:{id:\"${address}\"} ){\n              id\n              borrowingPools {\n                id\n                borrower{\n                    twitterDetails{\n                        twitterId\n                    }\n                }\n                borrowRate\n                borrowAmountRequested\n                loanStatus\n                published\n                loanStartTime\n                lentAmount\n                borrowAsset\n              }\n            }\n        }`\n    })\n\n    var options = {\n        'method': 'POST',\n        'url': SUBGRAPH_API_URL,\n        'headers': {'Content-Type': 'application/json'},\n        'body': data\n    }\n\n    result = request(options, async function (error, response) {\n\n        if (error) {\n            setpoolBorrowData([])\n            throw new Error(error)\n        }; \n        var body = JSON.parse(response.body)\n        var pools = []\n        if(body){\n            if(body.data){\n                if(body.data.users && body.data.users.length>0){\n                    if(body.data.users[0].borrowingPools){\n                        let poolData = body.data.users[0].borrowingPools\n                        for(var i =0;i<poolData.length;i++){\n                            let name = 'user name'\n                            try {\n                                name = ethers.utils.parseBytes32String(poolData[i].borrower.twitterDetails.twitterId)\n                            } catch (error) {}\n                            var pool = {\n                                id: i+1,\n                                avatar: '',\n                                name,\n                                username: `@${name}`,\n                                pool_type: 'Open Borrow',\n                                pool_status: poolData[i].loanStatus,\n                                created_on: '18th Jan 2021',\n                                borrow_rate: (poolData[i].borrowRate)/10**8+'%',\n                                borrowed_amount: (poolData[i].borrowAmountRequested)/10**18+' '+ getSymbol(poolData[i].borrowAsset),\n                                progress_and_payment_txt: 'Collection Progress',\n                                progress_and_payment: Math.floor((poolData[i].lentAmount*100)/poolData[i].borrowAmountRequested)+'%',\n                                next_payment: '200 DOT',\n                                ends_date: getLoanStartDay( poolData[i].loanStartTime),\n                                btn_1: 'Provide collateral',\n                                btn_2: 'View More',\n                                address:poolData[i].id\n                            }\n                            pools.push(pool)\n                        }\n                    }\n                }\n            }\n        }\n        setpoolBorrowData(pools)\n    })\n};"]},"metadata":{},"sourceType":"module"}