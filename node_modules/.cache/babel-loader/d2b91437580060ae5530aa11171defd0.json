{"ast":null,"code":"import request from 'request';\nimport { getSymbol } from './../../utility/symbol';\nimport { getLoanStartDay, countdown } from './../../utility/time';\nimport { ethers } from 'ethers';\nimport { SUBGRAPH_API_URL } from '../../utility/constants';\nexport function borrowMoreDetailPools(address, setpooldata) {\n  let result;\n  const data = JSON.stringify({\n    query: `  {\n            pools(where:{id:\"${address}\"}) {\n              id\n              idealCollateralRatio\n              borrowAmountRequested\n              collateralAsset\n              borrowAsset\n              borrowRate\n              borrowAmountRequested\n              lentAmount\n              loanStartTime\n              repaymentInterval\n              published\n              baseLiquidityShares\n              noOfRepaymentIntervals\n              borrower{\n                id \n                twitterDetails{\n                    twitterId\n                }\n              }\n            }\n        }`\n  });\n  var options = {\n    'method': 'POST',\n    'url': SUBGRAPH_API_URL,\n    'headers': {\n      'Content-Type': 'application/json'\n    },\n    'body': data\n  };\n  result = request(options, async function (error, response) {\n    if (error) throw new Error(error);\n    var body = JSON.parse(response.body);\n    var pools = [];\n\n    if (body) {\n      if (body.data) {\n        if (body.data.pools && body.data.pools.length > 0) {\n          if (body.data.pools[0]) {\n            let poolData = body.data.pools[0];\n            let name = 'user name';\n\n            try {\n              name = ethers.utils.parseBytes32String(poolData.borrower.twitterDetails.twitterId);\n            } catch (error) {}\n\n            var pool = {\n              collateralRatio: poolData.idealCollateralRatio + '%',\n              borrowed_amount: poolData.borrowAmountRequested / 10 ** 18 + ' ' + getSymbol(poolData.borrowAsset),\n              collateralAssest: getSymbol(poolData.collateralAsset),\n              borrowRate: poolData.borrowRate / 10 ** 8 + '%',\n              collectionProgress: Math.floor(poolData.lentAmount * 100 / poolData.borrowAmountRequested) + '%',\n              collectionEnds: getLoanStartDay(poolData.loanStartTime),\n              RepaymentFrequency: countdown(poolData.repaymentInterval),\n              publishedDate: new Date(parseInt(poolData.published) * 1000),\n              collateralAmount: poolData.baseLiquidityShares / 10 ** 18 + ' ' + getSymbol(poolData.collateralAsset),\n              LoanPeriod: countdown(poolData.repaymentInterval * poolData.noOfRepaymentIntervals),\n              name,\n              username: `@${name}`\n            };\n            setpooldata(pool);\n          }\n        }\n      }\n    }\n  });\n}\n;","map":{"version":3,"sources":["/Users/ritikdutta/Desktop/sublime-frontend/src/query/pool/borrowPoolDetails.js"],"names":["request","getSymbol","getLoanStartDay","countdown","ethers","SUBGRAPH_API_URL","borrowMoreDetailPools","address","setpooldata","result","data","JSON","stringify","query","options","error","response","Error","body","parse","pools","length","poolData","name","utils","parseBytes32String","borrower","twitterDetails","twitterId","pool","collateralRatio","idealCollateralRatio","borrowed_amount","borrowAmountRequested","borrowAsset","collateralAssest","collateralAsset","borrowRate","collectionProgress","Math","floor","lentAmount","collectionEnds","loanStartTime","RepaymentFrequency","repaymentInterval","publishedDate","Date","parseInt","published","collateralAmount","baseLiquidityShares","LoanPeriod","noOfRepaymentIntervals","username"],"mappings":"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","sourcesContent":["import request from 'request'\nimport {getSymbol} from './../../utility/symbol'\nimport {getLoanStartDay,countdown} from './../../utility/time'\nimport {ethers} from 'ethers'\nimport {SUBGRAPH_API_URL} from '../../utility/constants'\n\nexport function borrowMoreDetailPools(address,setpooldata){\n    let result;\n    const data = JSON.stringify({\n        query: `  {\n            pools(where:{id:\"${address}\"}) {\n              id\n              idealCollateralRatio\n              borrowAmountRequested\n              collateralAsset\n              borrowAsset\n              borrowRate\n              borrowAmountRequested\n              lentAmount\n              loanStartTime\n              repaymentInterval\n              published\n              baseLiquidityShares\n              noOfRepaymentIntervals\n              borrower{\n                id \n                twitterDetails{\n                    twitterId\n                }\n              }\n            }\n        }`\n    })\n\n    var options = {\n        'method': 'POST',\n        'url': SUBGRAPH_API_URL,\n        'headers': {'Content-Type': 'application/json'},\n        'body': data\n    }       \n\n    result = request(options, async function (error, response) {\n\n        if (error) throw new Error(error); \n        var body = JSON.parse(response.body)\n        var pools = []\n        if(body){\n            if(body.data){\n                if(body.data.pools && body.data.pools.length>0){\n                    if(body.data.pools[0]){\n                        let poolData = body.data.pools[0]\n                        let name = 'user name'\n                        try {\n                            name = ethers.utils.parseBytes32String(poolData.borrower.twitterDetails.twitterId)\n                        } catch (error) {}\n\n                        var pool = {\n                            collateralRatio: poolData.idealCollateralRatio+'%',\n                            borrowed_amount: ((poolData.borrowAmountRequested)/10**18)+ ' '+getSymbol(poolData.borrowAsset),\n                            collateralAssest: getSymbol(poolData.collateralAsset),\n                            borrowRate: (poolData.borrowRate)/10**8+'%',\n                            collectionProgress:Math.floor((poolData.lentAmount*100)/poolData.borrowAmountRequested)+'%',\n                            collectionEnds: getLoanStartDay( poolData.loanStartTime),\n                            RepaymentFrequency:countdown(poolData.repaymentInterval),\n                            publishedDate: new Date(parseInt(poolData.published)*1000),\n                            collateralAmount : ((poolData.baseLiquidityShares)/10**18)+' '+getSymbol(poolData.collateralAsset),\n                            LoanPeriod:countdown(poolData.repaymentInterval*poolData.noOfRepaymentIntervals),\n                            name,\n                            username: `@${name}`\n                        }\n                        setpooldata(pool)\n                    }\n                }\n            }\n            \n        }\n        \n    })\n    \n};"]},"metadata":{},"sourceType":"module"}