{"ast":null,"code":"import { ethers } from \"ethers\";\n\nconst poolContract = require(\"../abi/pool.json\");\n\nexport async function lend(amount, address) {\n  let newAmount = ethers.utils.parseUnits(amount.toString()).toString();\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  var contract = new ethers.Contract(address, poolContract, provider);\n  let balance = await signer.getBalance();\n  contract = contract.connect(signer);\n  let lender = await signer.getAddress();\n  console.log('lender', lender);\n  const lenderTransactionConfig = {\n    from: lender,\n    gasPrice: \"1000000000\",\n    value: newAmount\n  };\n  await contract.functions.lend(address, newAmount, false, lenderTransactionConfig).then(res => console.log('Response', res)).catch(error => console.log('Error', error));\n}","map":{"version":3,"sources":["/Users/ritikdutta/Desktop/sublime-frontend/src/contractTranscations/lend.js"],"names":["ethers","poolContract","require","lend","amount","address","newAmount","utils","parseUnits","toString","provider","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","balance","getBalance","connect","lender","getAddress","console","log","lenderTransactionConfig","from","gasPrice","value","functions","then","res","catch","error"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;;AAGA,MAAMC,YAAY,GAAGC,OAAO,CAAC,kBAAD,CAA5B;;AAKA,OAAO,eAAeC,IAAf,CAAoBC,MAApB,EAA2BC,OAA3B,EAAmC;AAGxC,MAAIC,SAAS,GAAIN,MAAM,CAACO,KAAP,CAAaC,UAAb,CAAwBJ,MAAM,CAACK,QAAP,EAAxB,CAAD,CAA6CA,QAA7C,EAAhB;AAEA,QAAMC,QAAQ,GAAG,IAAIV,MAAM,CAACW,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,CAAjB;AACA,QAAMC,MAAM,GAAGL,QAAQ,CAACM,SAAT,EAAf;AAEA,MAAIC,QAAQ,GAAG,IAAIjB,MAAM,CAACkB,QAAX,CAAoBb,OAApB,EAA6BJ,YAA7B,EAA2CS,QAA3C,CAAf;AAEA,MAAIS,OAAO,GAAG,MAAMJ,MAAM,CAACK,UAAP,EAApB;AACAH,EAAAA,QAAQ,GAAGA,QAAQ,CAACI,OAAT,CAAiBN,MAAjB,CAAX;AACA,MAAIO,MAAM,GAAG,MAAMP,MAAM,CAACQ,UAAP,EAAnB;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBH,MAAtB;AACA,QAAMI,uBAAuB,GAAG;AAC9BC,IAAAA,IAAI,EAAEL,MADwB;AAE9BM,IAAAA,QAAQ,EAAE,YAFoB;AAG9BC,IAAAA,KAAK,EAAEvB;AAHuB,GAAhC;AAKA,QAAMW,QAAQ,CAACa,SAAT,CACL3B,IADK,CAEJE,OAFI,EAEIC,SAFJ,EAEc,KAFd,EAEoBoB,uBAFpB,EAGJK,IAHI,CAGEC,GAAD,IAASR,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBO,GAAxB,CAHV,EAILC,KAJK,CAIEC,KAAD,IAAWV,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBS,KAArB,CAJZ,CAAN;AAKD","sourcesContent":["import { ethers } from \"ethers\";\n\n\nconst poolContract = require(\"../abi/pool.json\");\n\n\n\n\nexport async function lend(amount,address){\n\n\n  let newAmount = (ethers.utils.parseUnits(amount.toString())).toString()\n\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n\n  var contract = new ethers.Contract(address, poolContract, provider);\n\n  let balance = await signer.getBalance();\n  contract = contract.connect(signer);\n  let lender = await signer.getAddress();\n\n  console.log('lender', lender);\n  const lenderTransactionConfig = {\n    from: lender,\n    gasPrice: \"1000000000\",\n    value: newAmount,\n  };\n  await contract.functions\n  .lend(\n    address,newAmount,false,lenderTransactionConfig\n  ).then((res) => console.log('Response', res))\n  .catch((error) => console.log('Error', error));\n}\n\n\n    \n"]},"metadata":{},"sourceType":"module"}