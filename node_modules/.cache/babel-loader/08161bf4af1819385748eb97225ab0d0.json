{"ast":null,"code":"import request from 'request';\nimport { getSymbol } from './../../utility/symbol';\nimport { getLoanStartDay, countdown } from './../../utility/time';\nimport { ethers } from 'ethers';\nimport { SUBGRAPH_API_URL } from '../../utility/constants';\nimport { getSupportedTokens } from '../../utility/functions';\nexport function lendMoreDetailPools(address, setpooldata) {\n  let result;\n  const data = JSON.stringify({\n    query: `  {\n            pools(where:{id:\"${address}\"}) {\n              id\n              idealCollateralRatio\n              borrowAmountRequested\n              collateralAsset\n              borrowAsset\n              borrowRate\n              borrowAmountRequested\n              lentAmount\n              loanStartTime\n              repaymentInterval\n              published\n              noOfRepaymentIntervals\n              borrower{\n                id \n                twitterDetails{\n                    twitterId\n                }\n              }\n            }\n          }\n        \n          `\n  });\n  var options = {\n    'method': 'POST',\n    'url': SUBGRAPH_API_URL,\n    'headers': {\n      'Content-Type': 'application/json'\n    },\n    'body': data\n  };\n  result = request(options, async function (error, response) {\n    if (error) throw new Error(error);\n    var body = JSON.parse(response.body);\n    var pools = [];\n\n    if (body) {\n      if (body.data) {\n        if (body.data.pools && body.data.pools.length > 0) {\n          if (body.data.pools[0]) {\n            let poolData = body.data.pools[0];\n            let name = 'user name';\n\n            try {\n              name = ethers.utils.parseBytes32String(poolData.borrower.twitterDetails.twitterId);\n            } catch (error) {}\n\n            let BorrowAssest = {\n              value: ''\n            };\n            const collateralAsset = getSupportedTokens('collateralTokens').find(token => token.address.toLowerCase() === poolData.collateralAsset.toLowerCase());\n            const asset = getSupportedTokens('borrowTokens').find(token => token.address.toLowerCase() === poolData.borrowAsset.toLowerCase());\n\n            if (asset) {\n              BorrowAssest = asset;\n            }\n\n            var pool = {\n              collateralRatio: poolData.idealCollateralRatio / 10 ** 8 + '%',\n              borrowed_amount: poolData.borrowAmountRequested / 10 ** 18 + ' ' + BorrowAssest.value,\n              collateralAssest: collateralAsset,\n              BorrowAssest,\n              borrowRate: poolData.borrowRate / 10 ** 8 + '%',\n              collectionProgress: Math.floor(poolData.lentAmount * 100 / poolData.borrowAmountRequested) + '%',\n              collectionEnds: getLoanStartDay(poolData.loanStartTime),\n              RepaymentFrequency: countdown(poolData.repaymentInterval),\n              publishedDate: new Date(parseInt(poolData.published) * 1000),\n              LoanPeriod: countdown(poolData.repaymentInterval * poolData.noOfRepaymentIntervals),\n              name,\n              username: `@${name}`\n            };\n            setpooldata(pool);\n          }\n        }\n      }\n    }\n  });\n}\n;","map":{"version":3,"sources":["/Users/ritikdutta/Desktop/Sublime/src/query/pool/lendPoolDetail.js"],"names":["request","getSymbol","getLoanStartDay","countdown","ethers","SUBGRAPH_API_URL","getSupportedTokens","lendMoreDetailPools","address","setpooldata","result","data","JSON","stringify","query","options","error","response","Error","body","parse","pools","length","poolData","name","utils","parseBytes32String","borrower","twitterDetails","twitterId","BorrowAssest","value","collateralAsset","find","token","toLowerCase","asset","borrowAsset","pool","collateralRatio","idealCollateralRatio","borrowed_amount","borrowAmountRequested","collateralAssest","borrowRate","collectionProgress","Math","floor","lentAmount","collectionEnds","loanStartTime","RepaymentFrequency","repaymentInterval","publishedDate","Date","parseInt","published","LoanPeriod","noOfRepaymentIntervals","username"],"mappings":"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","sourcesContent":["import request from 'request'\nimport {getSymbol} from './../../utility/symbol'\nimport {getLoanStartDay,countdown} from './../../utility/time'\nimport {ethers} from 'ethers'\nimport {SUBGRAPH_API_URL} from '../../utility/constants'\nimport { getSupportedTokens } from '../../utility/functions';\n\n\nexport function lendMoreDetailPools(address,setpooldata){\n\n    let result;\n    const data = JSON.stringify({\n        query: `  {\n            pools(where:{id:\"${address}\"}) {\n              id\n              idealCollateralRatio\n              borrowAmountRequested\n              collateralAsset\n              borrowAsset\n              borrowRate\n              borrowAmountRequested\n              lentAmount\n              loanStartTime\n              repaymentInterval\n              published\n              noOfRepaymentIntervals\n              borrower{\n                id \n                twitterDetails{\n                    twitterId\n                }\n              }\n            }\n          }\n        \n          `\n    })\n\n    var options = {\n        'method': 'POST',\n        'url': SUBGRAPH_API_URL,\n        'headers': {'Content-Type': 'application/json'},\n        'body': data\n    }       \n\n\n    result = request(options, async function (error, response) {\n\n        if (error) throw new Error(error); \n        var body = JSON.parse(response.body)\n        var pools = []\n        if(body){\n            if(body.data){\n                if(body.data.pools && body.data.pools.length>0){\n                    if(body.data.pools[0]){\n                        let poolData = body.data.pools[0]\n                        let name = 'user name'\n                        try {\n                            name = ethers.utils.parseBytes32String(poolData.borrower.twitterDetails.twitterId)\n                        } catch (error) {}\n                        let BorrowAssest = { value: '' }\n                        const collateralAsset = getSupportedTokens('collateralTokens').find((token) => token.address.toLowerCase() === poolData.collateralAsset.toLowerCase())\n                        const asset = getSupportedTokens('borrowTokens').find((token) => token.address.toLowerCase() === poolData.borrowAsset.toLowerCase())\n                        if (asset) {\n                            BorrowAssest = asset\n                        }\n                        var pool = {\n                            collateralRatio: (poolData.idealCollateralRatio)/10**8 +'%',\n                            borrowed_amount: ((poolData.borrowAmountRequested)/10**18)+ ' '+BorrowAssest.value,\n                            collateralAssest: collateralAsset,\n                            BorrowAssest,\n                            borrowRate: (poolData.borrowRate)/10**8+'%',\n                            collectionProgress:Math.floor(poolData.lentAmount*100/poolData.borrowAmountRequested)+'%',\n                            collectionEnds: getLoanStartDay( poolData.loanStartTime),\n                            RepaymentFrequency:countdown(poolData.repaymentInterval),\n                            publishedDate: new Date(parseInt(poolData.published)*1000),\n                            LoanPeriod:countdown(poolData.repaymentInterval*poolData.noOfRepaymentIntervals),\n                            name,\n                            username: `@${name}`\n                        }\n                        setpooldata(pool)\n                    }\n                }\n            }\n            \n        }\n        \n    })\n    \n};"]},"metadata":{},"sourceType":"module"}