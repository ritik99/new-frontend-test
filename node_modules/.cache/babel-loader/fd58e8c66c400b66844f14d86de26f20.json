{"ast":null,"code":"import { ethers } from \"ethers\";\nimport request from 'request';\nimport { SUBGRAPH_API_URL } from '../../utility/constants';\n\nconst poolToken = require(\"../../abi/artifacts/contracts/Pool/PoolToken.sol/PoolToken.json\");\n\nconst _interface = new ethers.utils.Interface(poolToken.abi);\n\nconst initializeFragement = _interface.getFunction(\"totalSupply\");\n\nexport const getTotalSupple = setMaxAmount => {\n  const totalSupply = _interface.encodeFunctionData(initializeFragement, []);\n\n  setMaxAmount(totalSupply);\n};\nexport const getDataById = (id, setDataById) => {\n  const data = JSON.stringify({\n    query: `{\n      pools(where: {\n        id: \"${id}\"\n      }) {\n        repaymentInterval\n        borrowAsset\n        collateralAsset\n      }\n    }`\n  });\n  var options = {\n    'method': 'POST',\n    'url': SUBGRAPH_API_URL,\n    'headers': {\n      'Content-Type': 'application/json'\n    },\n    'body': data\n  };\n  request(options, async function (error, response) {\n    if (error) {\n      return null;\n    } else {\n      var body = JSON.parse(response.body);\n\n      if (body.data.pools.length) {\n        setDataById(body.data.pools[0]);\n      }\n\n      return null;\n    }\n\n    ;\n  });\n};\nexport const getFormatedTime = t => {\n  var cd = 24 * 60 * 60 * 1000,\n      ch = 60 * 60 * 1000,\n      d = Math.floor(t / cd),\n      h = Math.floor((t - d * cd) / ch),\n      m = Math.round((t - d * cd - h * ch) / 60000);\n\n  if (m === 60) {\n    h++;\n    m = 0;\n  }\n\n  if (h === 24) {\n    d++;\n    h = 0;\n  }\n\n  return `${d}d ${h}h ${m}m`;\n};\nexport const getDateTime = date => {\n  return `${date.getDate()}-${date.getMonth() + 1}-${date.getFullYear()}`;\n};","map":{"version":3,"sources":["/Users/ritikdutta/Desktop/Sublime/src/contractTranscations/pool/lendingUtils.js"],"names":["ethers","request","SUBGRAPH_API_URL","poolToken","require","_interface","utils","Interface","abi","initializeFragement","getFunction","getTotalSupple","setMaxAmount","totalSupply","encodeFunctionData","getDataById","id","setDataById","data","JSON","stringify","query","options","error","response","body","parse","pools","length","getFormatedTime","t","cd","ch","d","Math","floor","h","m","round","getDateTime","date","getDate","getMonth","getFullYear"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SAAQC,gBAAR,QAA+B,yBAA/B;;AAEA,MAAMC,SAAS,GAAGC,OAAO,CAAC,iEAAD,CAAzB;;AACA,MAAMC,UAAU,GAAG,IAAIL,MAAM,CAACM,KAAP,CAAaC,SAAjB,CAA2BJ,SAAS,CAACK,GAArC,CAAnB;;AACA,MAAMC,mBAAmB,GAAGJ,UAAU,CAACK,WAAX,CAAuB,aAAvB,CAA5B;;AAEA,OAAO,MAAMC,cAAc,GAAIC,YAAD,IAAkB;AAC9C,QAAMC,WAAW,GAAGR,UAAU,CAACS,kBAAX,CAA8BL,mBAA9B,EAAmD,EAAnD,CAApB;;AACAG,EAAAA,YAAY,CAACC,WAAD,CAAZ;AACD,CAHM;AAKP,OAAO,MAAME,WAAW,GAAG,CAACC,EAAD,EAAKC,WAAL,KAAqB;AAC9C,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAC1BC,IAAAA,KAAK,EAAG;AACZ;AACA,eAAeL,EAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AAT8B,GAAf,CAAb;AAYA,MAAIM,OAAO,GAAG;AACZ,cAAU,MADE;AAEZ,WAAOpB,gBAFK;AAGZ,eAAW;AAAC,sBAAgB;AAAjB,KAHC;AAIZ,YAAQgB;AAJI,GAAd;AAOAjB,EAAAA,OAAO,CAACqB,OAAD,EAAU,gBAAgBC,KAAhB,EAAuBC,QAAvB,EAAiC;AAChD,QAAID,KAAJ,EAAU;AACR,aAAO,IAAP;AACD,KAFD,MAEO;AACL,UAAIE,IAAI,GAAGN,IAAI,CAACO,KAAL,CAAWF,QAAQ,CAACC,IAApB,CAAX;;AACA,UAAIA,IAAI,CAACP,IAAL,CAAUS,KAAV,CAAgBC,MAApB,EAA4B;AAC1BX,QAAAA,WAAW,CAACQ,IAAI,CAACP,IAAL,CAAUS,KAAV,CAAgB,CAAhB,CAAD,CAAX;AACD;;AACD,aAAO,IAAP;AACD;;AAAA;AACF,GAVM,CAAP;AAWD,CA/BM;AAiCP,OAAO,MAAME,eAAe,GAAIC,CAAD,IAAO;AACpC,MAAIC,EAAE,GAAG,KAAK,EAAL,GAAU,EAAV,GAAe,IAAxB;AAAA,MACAC,EAAE,GAAG,KAAK,EAAL,GAAU,IADf;AAAA,MAEAC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWL,CAAC,GAAGC,EAAf,CAFJ;AAAA,MAGAK,CAAC,GAAGF,IAAI,CAACC,KAAL,CAAY,CAACL,CAAC,GAAGG,CAAC,GAAGF,EAAT,IAAeC,EAA3B,CAHJ;AAAA,MAIAK,CAAC,GAAGH,IAAI,CAACI,KAAL,CAAY,CAACR,CAAC,GAAGG,CAAC,GAAGF,EAAR,GAAaK,CAAC,GAAGJ,EAAlB,IAAwB,KAApC,CAJJ;;AAKA,MAAIK,CAAC,KAAK,EAAV,EAAc;AACZD,IAAAA,CAAC;AACDC,IAAAA,CAAC,GAAG,CAAJ;AACD;;AACD,MAAID,CAAC,KAAK,EAAV,EAAc;AACZH,IAAAA,CAAC;AACDG,IAAAA,CAAC,GAAG,CAAJ;AACD;;AACD,SAAQ,GAAEH,CAAE,KAAIG,CAAE,KAAIC,CAAE,GAAxB;AACD,CAfM;AAiBP,OAAO,MAAME,WAAW,GAAIC,IAAD,IAAU;AACnC,SAAQ,GAAEA,IAAI,CAACC,OAAL,EAAe,IAAGD,IAAI,CAACE,QAAL,KAAgB,CAAE,IAAGF,IAAI,CAACG,WAAL,EAAmB,EAApE;AACD,CAFM","sourcesContent":["import { ethers } from \"ethers\";\nimport request from 'request';\nimport {SUBGRAPH_API_URL} from '../../utility/constants'\n\nconst poolToken = require(\"../../abi/artifacts/contracts/Pool/PoolToken.sol/PoolToken.json\");\nconst _interface = new ethers.utils.Interface(poolToken.abi);\nconst initializeFragement = _interface.getFunction(\"totalSupply\");\n\nexport const getTotalSupple = (setMaxAmount) => {\n  const totalSupply = _interface.encodeFunctionData(initializeFragement, []);\n  setMaxAmount(totalSupply)\n}\n\nexport const getDataById = (id, setDataById) => {\n  const data = JSON.stringify({\n    query: `{\n      pools(where: {\n        id: \"${id}\"\n      }) {\n        repaymentInterval\n        borrowAsset\n        collateralAsset\n      }\n    }`\n  })\n\n  var options = {\n    'method': 'POST',\n    'url': SUBGRAPH_API_URL,\n    'headers': {'Content-Type': 'application/json'},\n    'body': data\n  }\n\n  request(options, async function (error, response) {\n    if (error){\n      return null\n    } else {\n      var body = JSON.parse(response.body)\n      if (body.data.pools.length) {\n        setDataById(body.data.pools[0])\n      }\n      return null\n    };\n  })\n}\n\nexport const getFormatedTime = (t) => {\n  var cd = 24 * 60 * 60 * 1000,\n  ch = 60 * 60 * 1000,\n  d = Math.floor(t / cd),\n  h = Math.floor( (t - d * cd) / ch),\n  m = Math.round( (t - d * cd - h * ch) / 60000)\n  if( m === 60 ){\n    h++;\n    m = 0;\n  }\n  if( h === 24 ){\n    d++;\n    h = 0;\n  }\n  return `${d}d ${h}h ${m}m`;\n}\n\nexport const getDateTime = (date) => {\n  return `${date.getDate()}-${date.getMonth()+1}-${date.getFullYear()}`\n}\n"]},"metadata":{},"sourceType":"module"}