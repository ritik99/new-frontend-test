{"ast":null,"code":"import request from 'request';\nimport { getSymbol } from './../../utility/symbol';\nimport { getLoanStartDay, countdown } from './../../utility/time';\nimport { SUBGRAPH_API_URL } from '../../utility/constants';\nexport function lendersList(address, setLenders) {\n  let result;\n  console.log(address);\n  const data = JSON.stringify({\n    query: `{\n            pools(where:{id:\"${address}\"}){\n              id\n              lenders{\n                lender{\n                  id\n                  status\n                  twitterDetails{\n                    twitterId\n                  }\n                }\n                AmountLend\n              }\n            }\n          }\n          `\n  });\n  console.log(data);\n  var options = {\n    method: 'POST',\n    url: SUBGRAPH_API_URL,\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: data\n  };\n  result = request(options, async function (error, response) {\n    if (error) throw new Error(error);\n    var body = JSON.parse(response.body);\n    var allLenders = [];\n\n    if (body) {\n      if (body.data) {\n        if (body.data.pools && body.data.pools.length > 0) {\n          let lenders = body.data.pools[0].lenders;\n\n          for (var i = 0; i < lenders.length; i++) {\n            if (lenders[i].lender.status == 'UNVERIFIED') {\n              var data = {\n                lender: lenders[i].lender.id,\n                amountLend: lenders[i].AmountLend\n              };\n            } else {\n              var data = {\n                lender: lenders[i].lender.id,\n                amountLend: lenders[i].AmountLend,\n                twitterId: lenders[i].lender.id.twitterDetails\n              };\n            }\n\n            allLenders.push(data);\n          }\n\n          setLenders(allLenders);\n        }\n      }\n    }\n  });\n}","map":{"version":3,"sources":["/Users/ritikdutta/Desktop/SUBLIME/sublime-frontend/src/query/pool/lendersList.js"],"names":["request","getSymbol","getLoanStartDay","countdown","SUBGRAPH_API_URL","lendersList","address","setLenders","result","console","log","data","JSON","stringify","query","options","method","url","headers","body","error","response","Error","parse","allLenders","pools","length","lenders","i","lender","status","id","amountLend","AmountLend","twitterId","twitterDetails","push"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,eAAT,EAA0BC,SAA1B,QAA2C,sBAA3C;AACA,SAASC,gBAAT,QAAiC,yBAAjC;AAEA,OAAO,SAASC,WAAT,CAAqBC,OAArB,EAA8BC,UAA9B,EAA0C;AAC/C,MAAIC,MAAJ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACA,QAAMK,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAC1BC,IAAAA,KAAK,EAAG;AACZ,+BAA+BR,OAAQ;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhB8B,GAAf,CAAb;AAkBAG,EAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;AAEA,MAAII,OAAO,GAAG;AACZC,IAAAA,MAAM,EAAE,MADI;AAEZC,IAAAA,GAAG,EAAEb,gBAFO;AAGZc,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAHG;AAIZC,IAAAA,IAAI,EAAER;AAJM,GAAd;AAOAH,EAAAA,MAAM,GAAGR,OAAO,CAACe,OAAD,EAAU,gBAAgBK,KAAhB,EAAuBC,QAAvB,EAAiC;AACzD,QAAID,KAAJ,EAAW,MAAM,IAAIE,KAAJ,CAAUF,KAAV,CAAN;AACX,QAAID,IAAI,GAAGP,IAAI,CAACW,KAAL,CAAWF,QAAQ,CAACF,IAApB,CAAX;AACA,QAAIK,UAAU,GAAG,EAAjB;;AACA,QAAIL,IAAJ,EAAU;AACR,UAAIA,IAAI,CAACR,IAAT,EAAe;AACb,YAAIQ,IAAI,CAACR,IAAL,CAAUc,KAAV,IAAmBN,IAAI,CAACR,IAAL,CAAUc,KAAV,CAAgBC,MAAhB,GAAyB,CAAhD,EAAmD;AACjD,cAAIC,OAAO,GAAGR,IAAI,CAACR,IAAL,CAAUc,KAAV,CAAgB,CAAhB,EAAmBE,OAAjC;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,OAAO,CAACD,MAA5B,EAAoCE,CAAC,EAArC,EAAyC;AACvC,gBAAID,OAAO,CAACC,CAAD,CAAP,CAAWC,MAAX,CAAkBC,MAAlB,IAA4B,YAAhC,EAA8C;AAC5C,kBAAInB,IAAI,GAAG;AACTkB,gBAAAA,MAAM,EAAEF,OAAO,CAACC,CAAD,CAAP,CAAWC,MAAX,CAAkBE,EADjB;AAETC,gBAAAA,UAAU,EAAEL,OAAO,CAACC,CAAD,CAAP,CAAWK;AAFd,eAAX;AAID,aALD,MAKO;AACL,kBAAItB,IAAI,GAAG;AACTkB,gBAAAA,MAAM,EAAEF,OAAO,CAACC,CAAD,CAAP,CAAWC,MAAX,CAAkBE,EADjB;AAETC,gBAAAA,UAAU,EAAEL,OAAO,CAACC,CAAD,CAAP,CAAWK,UAFd;AAGTC,gBAAAA,SAAS,EAAEP,OAAO,CAACC,CAAD,CAAP,CAAWC,MAAX,CAAkBE,EAAlB,CAAqBI;AAHvB,eAAX;AAKD;;AACDX,YAAAA,UAAU,CAACY,IAAX,CAAgBzB,IAAhB;AACD;;AAEDJ,UAAAA,UAAU,CAACiB,UAAD,CAAV;AACD;AACF;AACF;AACF,GA5Be,CAAhB;AA6BD","sourcesContent":["import request from 'request';\nimport { getSymbol } from './../../utility/symbol';\nimport { getLoanStartDay, countdown } from './../../utility/time';\nimport { SUBGRAPH_API_URL } from '../../utility/constants';\n\nexport function lendersList(address, setLenders) {\n  let result;\n  console.log(address);\n  const data = JSON.stringify({\n    query: `{\n            pools(where:{id:\"${address}\"}){\n              id\n              lenders{\n                lender{\n                  id\n                  status\n                  twitterDetails{\n                    twitterId\n                  }\n                }\n                AmountLend\n              }\n            }\n          }\n          `,\n  });\n  console.log(data);\n\n  var options = {\n    method: 'POST',\n    url: SUBGRAPH_API_URL,\n    headers: { 'Content-Type': 'application/json' },\n    body: data,\n  };\n\n  result = request(options, async function (error, response) {\n    if (error) throw new Error(error);\n    var body = JSON.parse(response.body);\n    var allLenders = [];\n    if (body) {\n      if (body.data) {\n        if (body.data.pools && body.data.pools.length > 0) {\n          let lenders = body.data.pools[0].lenders;\n          for (var i = 0; i < lenders.length; i++) {\n            if (lenders[i].lender.status == 'UNVERIFIED') {\n              var data = {\n                lender: lenders[i].lender.id,\n                amountLend: lenders[i].AmountLend,\n              };\n            } else {\n              var data = {\n                lender: lenders[i].lender.id,\n                amountLend: lenders[i].AmountLend,\n                twitterId: lenders[i].lender.id.twitterDetails,\n              };\n            }\n            allLenders.push(data);\n          }\n\n          setLenders(allLenders);\n        }\n      }\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}