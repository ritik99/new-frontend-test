{"ast":null,"code":"import request from 'request';\nimport { getSymbol } from './../../utility/symbol';\nimport { getLoanStartDay, countdown } from './../../utility/time';\nimport { SUBGRAPH_API_URL } from '../../utility/constants';\nexport function lendersList(address, setLenders) {\n  let result;\n  console.log(address);\n  const data = JSON.stringify({\n    query: `{\n            pools(where:{id:\"${address}\"}){\n              id\n              lenders{\n                lender{\n                  id\n                  status\n                  twitterDetails{\n                    twitterId\n                  }\n                }\n                AmountLend\n              }\n            }\n          }\n          `\n  });\n  console.log(data);\n  var options = {\n    'method': 'POST',\n    'url': SUBGRAPH_API_URL,\n    'headers': {\n      'Content-Type': 'application/json'\n    },\n    'body': data\n  };\n  result = request(options, async function (error, response) {\n    if (error) throw new Error(error);\n    var body = JSON.parse(response.body);\n    var allLenders = [];\n\n    if (body) {\n      if (body.data) {\n        if (body.data.pools && body.data.pools.length > 0) {\n          let lenders = body.data.pools[0].lenders;\n\n          for (var i = 0; i < lenders.length; i++) {\n            if (lenders[i].lender.status == 'UNVERIFIED') {\n              var data = {\n                lender: lenders[i].lender.id,\n                amountLend: lenders[i].AmountLend\n              };\n            } else {\n              var data = {\n                lender: lenders[i].lender.id,\n                amountLend: lenders[i].AmountLend,\n                twitterId: lenders[i].lender.id.twitterDetails\n              };\n            }\n\n            allLenders.push(data);\n          }\n\n          setLenders(allLenders);\n        }\n      }\n    }\n  });\n}\n;","map":{"version":3,"sources":["/Users/ritikdutta/Desktop/Sublime/src/query/pool/lendersList.js"],"names":["request","getSymbol","getLoanStartDay","countdown","SUBGRAPH_API_URL","lendersList","address","setLenders","result","console","log","data","JSON","stringify","query","options","error","response","Error","body","parse","allLenders","pools","length","lenders","i","lender","status","id","amountLend","AmountLend","twitterId","twitterDetails","push"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,SAAQC,SAAR,QAAwB,wBAAxB;AACA,SAAQC,eAAR,EAAwBC,SAAxB,QAAwC,sBAAxC;AACA,SAAQC,gBAAR,QAA+B,yBAA/B;AAEA,OAAO,SAASC,WAAT,CAAqBC,OAArB,EAA6BC,UAA7B,EAAwC;AAE3C,MAAIC,MAAJ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACA,QAAMK,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AACxBC,IAAAA,KAAK,EAAG;AAChB,+BAA+BR,OAAQ;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBgC,GAAf,CAAb;AAkBAG,EAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;AAEA,MAAII,OAAO,GAAG;AACV,cAAU,MADA;AAEV,WAAOX,gBAFG;AAGV,eAAW;AAAC,sBAAgB;AAAjB,KAHD;AAIV,YAAQO;AAJE,GAAd;AAQAH,EAAAA,MAAM,GAAGR,OAAO,CAACe,OAAD,EAAU,gBAAgBC,KAAhB,EAAuBC,QAAvB,EAAiC;AAEvD,QAAID,KAAJ,EAAW,MAAM,IAAIE,KAAJ,CAAUF,KAAV,CAAN;AACX,QAAIG,IAAI,GAAGP,IAAI,CAACQ,KAAL,CAAWH,QAAQ,CAACE,IAApB,CAAX;AACA,QAAIE,UAAU,GAAG,EAAjB;;AACA,QAAGF,IAAH,EAAQ;AACJ,UAAGA,IAAI,CAACR,IAAR,EAAa;AACT,YAAGQ,IAAI,CAACR,IAAL,CAAUW,KAAV,IAAmBH,IAAI,CAACR,IAAL,CAAUW,KAAV,CAAgBC,MAAhB,GAAuB,CAA7C,EAA+C;AAC3C,cAAIC,OAAO,GAAGL,IAAI,CAACR,IAAL,CAAUW,KAAV,CAAgB,CAAhB,EAAmBE,OAAjC;;AACA,eAAI,IAAIC,CAAC,GAAG,CAAZ,EAAcA,CAAC,GAACD,OAAO,CAACD,MAAxB,EAA+BE,CAAC,EAAhC,EAAmC;AACjC,gBAAGD,OAAO,CAACC,CAAD,CAAP,CAAWC,MAAX,CAAkBC,MAAlB,IAA4B,YAA/B,EAA4C;AAC1C,kBAAIhB,IAAI,GAAG;AACTe,gBAAAA,MAAM,EAACF,OAAO,CAACC,CAAD,CAAP,CAAWC,MAAX,CAAkBE,EADhB;AAETC,gBAAAA,UAAU,EAACL,OAAO,CAACC,CAAD,CAAP,CAAWK;AAFb,eAAX;AAID,aALD,MAMI;AACA,kBAAInB,IAAI,GAAG;AACTe,gBAAAA,MAAM,EAACF,OAAO,CAACC,CAAD,CAAP,CAAWC,MAAX,CAAkBE,EADhB;AAETC,gBAAAA,UAAU,EAACL,OAAO,CAACC,CAAD,CAAP,CAAWK,UAFb;AAGTC,gBAAAA,SAAS,EAACP,OAAO,CAACC,CAAD,CAAP,CAAWC,MAAX,CAAkBE,EAAlB,CAAqBI;AAHtB,eAAX;AAKH;;AACDX,YAAAA,UAAU,CAACY,IAAX,CAAgBtB,IAAhB;AACD;;AAEDJ,UAAAA,UAAU,CAACc,UAAD,CAAV;AACH;AACJ;AAEJ;AAEJ,GAhCe,CAAhB;AAkCH;AAAA","sourcesContent":["import request from 'request'\nimport {getSymbol} from './../../utility/symbol'\nimport {getLoanStartDay,countdown} from './../../utility/time'\nimport {SUBGRAPH_API_URL} from '../../utility/constants'\n\nexport function lendersList(address,setLenders){\n\n    let result;\n    console.log(address)\n    const data = JSON.stringify({\n        query: `{\n            pools(where:{id:\"${address}\"}){\n              id\n              lenders{\n                lender{\n                  id\n                  status\n                  twitterDetails{\n                    twitterId\n                  }\n                }\n                AmountLend\n              }\n            }\n          }\n          `\n    })\n    console.log(data)\n\n    var options = {\n        'method': 'POST',\n        'url': SUBGRAPH_API_URL,\n        'headers': {'Content-Type': 'application/json'},\n        'body': data\n    }       \n\n\n    result = request(options, async function (error, response) {\n\n        if (error) throw new Error(error); \n        var body = JSON.parse(response.body)\n        var allLenders = []\n        if(body){\n            if(body.data){\n                if(body.data.pools && body.data.pools.length>0){\n                    let lenders = body.data.pools[0].lenders\n                    for(var i = 0;i<lenders.length;i++){\n                      if(lenders[i].lender.status == 'UNVERIFIED'){\n                        var data = {\n                          lender:lenders[i].lender.id,\n                          amountLend:lenders[i].AmountLend\n                        } \n                      }\n                      else{\n                          var data = {\n                            lender:lenders[i].lender.id,\n                            amountLend:lenders[i].AmountLend,\n                            twitterId:lenders[i].lender.id.twitterDetails\n                        }\n                      }\n                      allLenders.push(data)\n                    }\n                    \n                    setLenders(allLenders)\n                }\n            }\n            \n        }\n        \n    })\n    \n};"]},"metadata":{},"sourceType":"module"}