{"ast":null,"code":"import { ethers } from \"ethers\";\nimport Web3 from \"web3\";\nimport { getConfiguredAddress } from '../utility/functions';\n\nconst ecr20abi = require(\"../abi/erc20.json\");\n\nconst web3 = new Web3(Web3.givenProvider);\nconst savingsAccount = getConfiguredAddress('savingsAccount');\n\nconst savingsContract = require(\"../abi/savingsAccount.json\");\n\nconst onDepositSuccess = (hash, callback) => {\n  const onCreateInterval = setInterval(async () => {\n    web3.eth.getTransactionReceipt(hash).then(txReceipt => {\n      if ((txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.status) === true) {\n        clearInterval(onCreateInterval);\n        console.log('true TXRECEIPT', txReceipt);\n        callback({\n          success: true,\n          type: 'deposit'\n        });\n      } else if ((txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.status) === false) {\n        console.log('false TXRECEIPT', txReceipt);\n      }\n    });\n  }, 5000);\n};\n\nexport async function deposit(amount, tokenAddress, strategy, to, callback) {\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  let lender = await signer.getAddress();\n  let newAmount = ethers.utils.parseUnits(amount.toString()).toString();\n  var contract = new web3.eth.Contract(savingsContract, savingsAccount);\n  var erc20contract = new web3.eth.Contract(ecr20abi, tokenAddress);\n  let addressToApprove = String(strategy).startsWith('0x00') ? savingsAccount : strategy;\n\n  try {\n    await erc20contract.methods.approve(addressToApprove, newAmount).send({\n      from: lender\n    }, async (error, receipt) => {\n      if (error) {\n        console.log('APPROVE ERROR', error);\n        callback({\n          error: true,\n          message: error.message\n        });\n        return;\n      }\n\n      const interval = setInterval(async () => {\n        web3.eth.getTransactionReceipt(receipt).then(async txReceipt => {\n          if ((txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.status) === true) {\n            clearInterval(interval);\n            await contract.methods.depositTo(newAmount, tokenAddress, strategy, savingsAccount).send({\n              from: lender\n            }, function async(err, res) {\n              if (err) {\n                console.log('DEPOSIT ERROR', err);\n                callback({\n                  error: true,\n                  message: err.message\n                });\n                return;\n              }\n\n              if (res) {\n                console.log('DEPOSIT HASH', res);\n                onDepositSuccess(res, callback);\n              }\n            });\n          } else if ((txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.status) === false) {\n            console.log('approve false TXRECEIPT', txReceipt);\n          }\n        });\n      }, 5000);\n    });\n  } catch (error) {\n    if (error.message.includes('User denied transaction')) {\n      callback({\n        error: true,\n        message: error.message\n      });\n    } else {\n      callback({\n        error: true,\n        message: 'Invalid values entered.'\n      });\n    }\n  }\n}","map":{"version":3,"sources":["/Users/ritikdutta/Desktop/sublime-frontend/src/contractTranscations/savingsAccount.js"],"names":["ethers","Web3","getConfiguredAddress","ecr20abi","require","web3","givenProvider","savingsAccount","savingsContract","onDepositSuccess","hash","callback","onCreateInterval","setInterval","eth","getTransactionReceipt","then","txReceipt","status","clearInterval","console","log","success","type","deposit","amount","tokenAddress","strategy","to","provider","providers","Web3Provider","window","ethereum","signer","getSigner","lender","getAddress","newAmount","utils","parseUnits","toString","contract","Contract","erc20contract","addressToApprove","String","startsWith","methods","approve","send","from","error","receipt","message","interval","depositTo","async","err","res","includes"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,oBAAT,QAAqC,sBAArC;;AAEA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB;;AACA,MAAMC,IAAI,GAAG,IAAIJ,IAAJ,CAASA,IAAI,CAACK,aAAd,CAAb;AAEA,MAAMC,cAAc,GAAGL,oBAAoB,CAAC,gBAAD,CAA3C;;AACA,MAAMM,eAAe,GAAGJ,OAAO,CAAC,4BAAD,CAA/B;;AAEA,MAAMK,gBAAgB,GAAG,CAACC,IAAD,EAAOC,QAAP,KAAoB;AAC3C,QAAMC,gBAAgB,GAAGC,WAAW,CAAC,YAAY;AAC/CR,IAAAA,IAAI,CAACS,GAAL,CAASC,qBAAT,CAA+BL,IAA/B,EAAqCM,IAArC,CAA2CC,SAAD,IAAe;AACvD,UAAI,CAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEC,MAAX,MAAsB,IAA1B,EAAgC;AAC9BC,QAAAA,aAAa,CAACP,gBAAD,CAAb;AAEAQ,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BJ,SAA9B;AACAN,QAAAA,QAAQ,CAAC;AAAEW,UAAAA,OAAO,EAAE,IAAX;AAAiBC,UAAAA,IAAI,EAAE;AAAvB,SAAD,CAAR;AACD,OALD,MAKO,IAAI,CAAAN,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEC,MAAX,MAAsB,KAA1B,EAAiC;AACtCE,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BJ,SAA/B;AACD;AACF,KATD;AAUD,GAXmC,EAWjC,IAXiC,CAApC;AAYD,CAbD;;AAeA,OAAO,eAAeO,OAAf,CAAuBC,MAAvB,EAA+BC,YAA/B,EAA6CC,QAA7C,EAAuDC,EAAvD,EAA2DjB,QAA3D,EAAoE;AACzE,QAAMkB,QAAQ,GAAG,IAAI7B,MAAM,CAAC8B,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,CAAjB;AACA,QAAMC,MAAM,GAAGL,QAAQ,CAACM,SAAT,EAAf;AACA,MAAIC,MAAM,GAAG,MAAMF,MAAM,CAACG,UAAP,EAAnB;AAEA,MAAIC,SAAS,GAAItC,MAAM,CAACuC,KAAP,CAAaC,UAAb,CAAwBf,MAAM,CAACgB,QAAP,EAAxB,CAAD,CAA6CA,QAA7C,EAAhB;AACA,MAAIC,QAAQ,GAAG,IAAIrC,IAAI,CAACS,GAAL,CAAS6B,QAAb,CAAsBnC,eAAtB,EAAuCD,cAAvC,CAAf;AACA,MAAIqC,aAAa,GAAG,IAAIvC,IAAI,CAACS,GAAL,CAAS6B,QAAb,CAAsBxC,QAAtB,EAAgCuB,YAAhC,CAApB;AACA,MAAImB,gBAAgB,GAAGC,MAAM,CAACnB,QAAD,CAAN,CAAiBoB,UAAjB,CAA4B,MAA5B,IAAsCxC,cAAtC,GAAuDoB,QAA9E;;AAEA,MAAI;AACF,UAAMiB,aAAa,CAACI,OAAd,CAAsBC,OAAtB,CACJJ,gBADI,EAEJP,SAFI,EAGJY,IAHI,CAGC;AAAEC,MAAAA,IAAI,EAAEf;AAAR,KAHD,EAGmB,OAAOgB,KAAP,EAAcC,OAAd,KAA0B;AACjD,UAAID,KAAJ,EAAW;AACThC,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B+B,KAA7B;AACAzC,QAAAA,QAAQ,CAAC;AAAEyC,UAAAA,KAAK,EAAE,IAAT;AAAeE,UAAAA,OAAO,EAAEF,KAAK,CAACE;AAA9B,SAAD,CAAR;AACA;AACD;;AAED,YAAMC,QAAQ,GAAG1C,WAAW,CAAC,YAAY;AACvCR,QAAAA,IAAI,CAACS,GAAL,CAASC,qBAAT,CAA+BsC,OAA/B,EAAwCrC,IAAxC,CAA6C,MAAOC,SAAP,IAAqB;AAChE,cAAI,CAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEC,MAAX,MAAsB,IAA1B,EAAgC;AAC9BC,YAAAA,aAAa,CAACoC,QAAD,CAAb;AACA,kBAAMb,QAAQ,CAACM,OAAT,CAAiBQ,SAAjB,CAA2BlB,SAA3B,EAAsCZ,YAAtC,EAAoDC,QAApD,EAA8DpB,cAA9D,EAA8E2C,IAA9E,CAAmF;AAAEC,cAAAA,IAAI,EAAEf;AAAR,aAAnF,EAAqG,SAASqB,KAAT,CAAeC,GAAf,EAAoBC,GAApB,EAAyB;AAClI,kBAAID,GAAJ,EAAS;AACPtC,gBAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BqC,GAA7B;AACA/C,gBAAAA,QAAQ,CAAC;AAAEyC,kBAAAA,KAAK,EAAE,IAAT;AAAeE,kBAAAA,OAAO,EAAEI,GAAG,CAACJ;AAA5B,iBAAD,CAAR;AACA;AACD;;AACD,kBAAIK,GAAJ,EAAS;AACPvC,gBAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BsC,GAA5B;AACAlD,gBAAAA,gBAAgB,CAACkD,GAAD,EAAMhD,QAAN,CAAhB;AACD;AACF,aAVK,CAAN;AAYD,WAdD,MAcO,IAAI,CAAAM,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEC,MAAX,MAAsB,KAA1B,EAAiC;AACtCE,YAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCJ,SAAvC;AACD;AACF,SAlBD;AAmBD,OApB2B,EAoBzB,IApByB,CAA5B;AAqBD,KA/BK,CAAN;AAgCD,GAjCD,CAiCE,OAAOmC,KAAP,EAAc;AACd,QAAIA,KAAK,CAACE,OAAN,CAAcM,QAAd,CAAuB,yBAAvB,CAAJ,EAAuD;AACrDjD,MAAAA,QAAQ,CAAC;AAAEyC,QAAAA,KAAK,EAAE,IAAT;AAAeE,QAAAA,OAAO,EAAEF,KAAK,CAACE;AAA9B,OAAD,CAAR;AACD,KAFD,MAEO;AACL3C,MAAAA,QAAQ,CAAC;AAAEyC,QAAAA,KAAK,EAAE,IAAT;AAAeE,QAAAA,OAAO,EAAE;AAAxB,OAAD,CAAR;AACD;AACF;AACF","sourcesContent":["import { ethers } from \"ethers\";\nimport Web3 from \"web3\"\nimport { getConfiguredAddress } from '../utility/functions'\n\nconst ecr20abi = require(\"../abi/erc20.json\");\nconst web3 = new Web3(Web3.givenProvider);\n\nconst savingsAccount = getConfiguredAddress('savingsAccount');\nconst savingsContract = require(\"../abi/savingsAccount.json\");\n\nconst onDepositSuccess = (hash, callback) => {\n  const onCreateInterval = setInterval(async () => {\n    web3.eth.getTransactionReceipt(hash).then((txReceipt) => {\n      if (txReceipt?.status === true) {\n        clearInterval(onCreateInterval);\n\n        console.log('true TXRECEIPT', txReceipt);\n        callback({ success: true, type: 'deposit' });\n      } else if (txReceipt?.status === false) {\n        console.log('false TXRECEIPT', txReceipt);\n      }\n    });\n  }, 5000);\n}\n\nexport async function deposit(amount, tokenAddress, strategy, to, callback){\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  let lender = await signer.getAddress();\n\n  let newAmount = (ethers.utils.parseUnits(amount.toString())).toString()\n  var contract = new web3.eth.Contract(savingsContract, savingsAccount);\n  var erc20contract = new web3.eth.Contract(ecr20abi, tokenAddress);\n  let addressToApprove = String(strategy).startsWith('0x00') ? savingsAccount : strategy\n\n  try {\n    await erc20contract.methods.approve(\n      addressToApprove,\n      newAmount\n    ).send({ from: lender }, async (error, receipt) => {\n      if (error) {\n        console.log('APPROVE ERROR', error);\n        callback({ error: true, message: error.message });\n        return\n      }\n\n      const interval = setInterval(async () => {\n        web3.eth.getTransactionReceipt(receipt).then(async (txReceipt) => {\n          if (txReceipt?.status === true) {\n            clearInterval(interval);\n            await contract.methods.depositTo(newAmount, tokenAddress, strategy, savingsAccount).send({ from: lender }, function async(err, res) {\n              if (err) {\n                console.log('DEPOSIT ERROR', err);\n                callback({ error: true, message: err.message });\n                return\n              }\n              if (res) {\n                console.log('DEPOSIT HASH', res);\n                onDepositSuccess(res, callback)\n              }\n            })\n    \n          } else if (txReceipt?.status === false) {\n            console.log('approve false TXRECEIPT', txReceipt);\n          }\n        });\n      }, 5000)\n    });\n  } catch (error) {\n    if (error.message.includes('User denied transaction')) {\n      callback({ error: true, message: error.message });\n    } else {\n      callback({ error: true, message: 'Invalid values entered.' });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}