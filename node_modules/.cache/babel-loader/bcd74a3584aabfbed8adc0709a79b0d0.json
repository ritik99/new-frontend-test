{"ast":null,"code":"import request from 'request'; // const Web3 = require(\"web3\");\n\nimport Web3 from \"web3\";\nimport priceOracle from '../../utility/priceOracleAddress.json';\nconst web3 = new Web3(\"https://kovan.infura.io/v3/9dc997986f8840daa0e6ccb1d8d0d757\");\nconst aggregatorV3InterfaceABI = [{\n  \"inputs\": [],\n  \"name\": \"decimals\",\n  \"outputs\": [{\n    \"internalType\": \"uint8\",\n    \"name\": \"\",\n    \"type\": \"uint8\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [],\n  \"name\": \"description\",\n  \"outputs\": [{\n    \"internalType\": \"string\",\n    \"name\": \"\",\n    \"type\": \"string\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"uint80\",\n    \"name\": \"_roundId\",\n    \"type\": \"uint80\"\n  }],\n  \"name\": \"getRoundData\",\n  \"outputs\": [{\n    \"internalType\": \"uint80\",\n    \"name\": \"roundId\",\n    \"type\": \"uint80\"\n  }, {\n    \"internalType\": \"int256\",\n    \"name\": \"answer\",\n    \"type\": \"int256\"\n  }, {\n    \"internalType\": \"uint256\",\n    \"name\": \"startedAt\",\n    \"type\": \"uint256\"\n  }, {\n    \"internalType\": \"uint256\",\n    \"name\": \"updatedAt\",\n    \"type\": \"uint256\"\n  }, {\n    \"internalType\": \"uint80\",\n    \"name\": \"answeredInRound\",\n    \"type\": \"uint80\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [],\n  \"name\": \"latestRoundData\",\n  \"outputs\": [{\n    \"internalType\": \"uint80\",\n    \"name\": \"roundId\",\n    \"type\": \"uint80\"\n  }, {\n    \"internalType\": \"int256\",\n    \"name\": \"answer\",\n    \"type\": \"int256\"\n  }, {\n    \"internalType\": \"uint256\",\n    \"name\": \"startedAt\",\n    \"type\": \"uint256\"\n  }, {\n    \"internalType\": \"uint256\",\n    \"name\": \"updatedAt\",\n    \"type\": \"uint256\"\n  }, {\n    \"internalType\": \"uint80\",\n    \"name\": \"answeredInRound\",\n    \"type\": \"uint80\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [],\n  \"name\": \"version\",\n  \"outputs\": [{\n    \"internalType\": \"uint256\",\n    \"name\": \"\",\n    \"type\": \"uint256\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}];\nexport async function getRequiredCollateralAmount(borrowAssest, collateralAssest, setRequiredCollateral, borrowTokens, collateralRatio) {\n  if (borrowAssest == collateralAssest) {\n    setRequiredCollateral(borrowTokens * collateralRatio / 100);\n    return;\n  } // await priceOracle.connect(admin).initialize(admin.address);\n  // await priceOracle.connect(admin).setfeedAddress(Contracts.LINK, ChainLinkAggregators[\"LINK/USD\"]);\n  // await priceOracle.connect(admin).setfeedAddress(Contracts.DAI, ChainLinkAggregators[\"DAI/USD\"]);\n\n\n  let addr = priceOracle.priceOracle.address[borrowAssest + '/' + collateralAssest]; // console.log(addr)\n\n  const priceFeed = new web3.eth.Contract(aggregatorV3InterfaceABI, addr);\n  let roundData = (await priceFeed.methods.latestRoundData().call()).answer / 10 ** 18; // console.log(roundData);\n\n  let required = borrowTokens * (collateralRatio / 100) * roundData; // console.log(required)\n\n  setRequiredCollateral(required);\n  return;\n}","map":{"version":3,"sources":["/Users/ritikdutta/Desktop/Sublime/src/query/pool/requiredCollateral.js"],"names":["request","Web3","priceOracle","web3","aggregatorV3InterfaceABI","getRequiredCollateralAmount","borrowAssest","collateralAssest","setRequiredCollateral","borrowTokens","collateralRatio","addr","address","priceFeed","eth","Contract","roundData","methods","latestRoundData","call","answer","required"],"mappings":"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","sourcesContent":["import request from 'request'\n// const Web3 = require(\"web3\");\nimport Web3 from \"web3\"\nimport priceOracle from '../../utility/priceOracleAddress.json'\n\n\nconst web3 = new Web3(\"https://kovan.infura.io/v3/9dc997986f8840daa0e6ccb1d8d0d757\");\nconst aggregatorV3InterfaceABI = [{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\n\n\nexport async function getRequiredCollateralAmount(borrowAssest,collateralAssest,setRequiredCollateral,borrowTokens,collateralRatio){\n\n        if(borrowAssest == collateralAssest){\n            setRequiredCollateral(borrowTokens*(collateralRatio)/100)\n            return\n        }\n\n        // await priceOracle.connect(admin).initialize(admin.address);\n        // await priceOracle.connect(admin).setfeedAddress(Contracts.LINK, ChainLinkAggregators[\"LINK/USD\"]);\n        // await priceOracle.connect(admin).setfeedAddress(Contracts.DAI, ChainLinkAggregators[\"DAI/USD\"]);\n\n        let addr = priceOracle.priceOracle.address[borrowAssest+'/'+collateralAssest]\n\n        // console.log(addr)\n        const priceFeed = new web3.eth.Contract(aggregatorV3InterfaceABI, addr);\n        let roundData =  ((await priceFeed.methods.latestRoundData().call()).answer)/10**18;\n        // console.log(roundData);\n        let required = borrowTokens*((collateralRatio)/100)*roundData\n        // console.log(required)\n        setRequiredCollateral(required)\n        return\n}\n"]},"metadata":{},"sourceType":"module"}