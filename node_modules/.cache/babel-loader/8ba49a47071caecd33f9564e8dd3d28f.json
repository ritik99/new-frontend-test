{"ast":null,"code":"import { ethers } from \"ethers\";\nimport Web3 from \"web3\";\nimport { getConfiguredAddress } from '../utility/functions';\n\nconst ecr20abi = require(\"../abi/erc20.json\");\n\nconst web3 = new Web3(Web3.givenProvider);\nconst repayments = getConfiguredAddress('repayments');\n\nconst repayContract = require(\"../abi/repayment.json\");\n\nconst onLendingSuccess = (hash, callback) => {\n  const onCreateInterval = setInterval(async () => {\n    web3.eth.getTransactionReceipt(hash).then(txReceipt => {\n      if ((txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.status) === true) {\n        clearInterval(onCreateInterval);\n        console.log('true TXRECEIPT', txReceipt);\n        callback({\n          success: true\n        });\n      } else if ((txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.status) === false) {\n        console.log('false TXRECEIPT', txReceipt);\n      }\n    });\n  }, 5000);\n};\n\nexport async function repayAmount(amount, poolAddress, tokenAddress, callback) {\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  let lender = await signer.getAddress();\n  let newAmount = ethers.utils.parseUnits(amount.toString()).toString();\n  var contract = new web3.eth.Contract(repayContract, repayments);\n  var erc20contract = new web3.eth.Contract(ecr20abi, tokenAddress);\n\n  try {\n    await erc20contract.methods.approve(poolAddress, newAmount).send({\n      from: lender\n    }, async (error, receipt) => {\n      if (error) {\n        console.log('APPROVE ERROR', error);\n        callback({\n          error: true,\n          message: error.message\n        });\n        return;\n      }\n\n      const interval = setInterval(async () => {\n        web3.eth.getTransactionReceipt(receipt).then(async txReceipt => {\n          if ((txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.status) === true) {\n            clearInterval(interval);\n            const isAllowed = await erc20contract.methods.allowance(lender, poolAddress).call();\n            console.log('isAllowed', isAllowed);\n            await contract.methods.repayAmount(lender, newAmount).send({\n              from: lender\n            }, function async(err, res) {\n              if (err) {\n                console.log('LEND ERROR', err);\n                callback({\n                  error: true,\n                  message: err.message\n                });\n                return;\n              }\n\n              if (res) {\n                console.log('LEND HASH', res);\n                onLendingSuccess(res, callback);\n              }\n            });\n          } else if ((txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.status) === false) {\n            console.log('approve false TXRECEIPT', txReceipt);\n          }\n        });\n      }, 5000);\n    });\n  } catch (error) {\n    if (error.message.includes('User denied transaction')) {\n      callback({\n        error: true,\n        message: error.message\n      });\n    } else {\n      callback({\n        error: true,\n        message: 'Invalid values entered.'\n      });\n    }\n  } // const provider = new ethers.providers.Web3Provider(window.ethereum);\n  // const signer = provider.getSigner();\n  // console.log(amount,address);\n  // let newAmount = (ethers.utils.parseUnits(amount.toString())).toString()\n  // var contract = new ethers.Contract(addr, repayContract, provider);\n  // contract = contract.connect(signer);\n  // let borrower = await signer.getAddress();\n  // let borrowerTransactionConfig;\n  // if(borrowAssest == ethers.constants.AddressZero){\n  //   borrowerTransactionConfig = {\n  //     from:borrower,\n  //     gasPrice: \"1000000000\",\n  //     value: newAmount,\n  //   }\n  // } else {\n  //   borrowerTransactionConfig = {\n  //     from:borrower,\n  //     gasPrice: \"1000000000\"\n  //   }\n  // }\n  // await contract.functions\n  // .repayAmount(\n  //   address,amount,borrowerTransactionConfig\n  // ).then(console.log);\n\n}","map":{"version":3,"sources":["/Users/ritikdutta/Desktop/sublime-frontend/src/contractTranscations/repayment.js"],"names":["ethers","Web3","getConfiguredAddress","ecr20abi","require","web3","givenProvider","repayments","repayContract","onLendingSuccess","hash","callback","onCreateInterval","setInterval","eth","getTransactionReceipt","then","txReceipt","status","clearInterval","console","log","success","repayAmount","amount","poolAddress","tokenAddress","provider","providers","Web3Provider","window","ethereum","signer","getSigner","lender","getAddress","newAmount","utils","parseUnits","toString","contract","Contract","erc20contract","methods","approve","send","from","error","receipt","message","interval","isAllowed","allowance","call","async","err","res","includes"],"mappings":"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","sourcesContent":["import { ethers } from \"ethers\";\nimport Web3 from \"web3\"\nimport { getConfiguredAddress } from '../utility/functions'\n\nconst ecr20abi = require(\"../abi/erc20.json\");\nconst web3 = new Web3(Web3.givenProvider);\n\nconst repayments = getConfiguredAddress('repayments');\nconst repayContract = require(\"../abi/repayment.json\");\n\nconst onLendingSuccess = (hash, callback) => {\n  const onCreateInterval = setInterval(async () => {\n    web3.eth.getTransactionReceipt(hash).then((txReceipt) => {\n      if (txReceipt?.status === true) {\n        clearInterval(onCreateInterval);\n\n        console.log('true TXRECEIPT', txReceipt);\n        callback({ success: true });\n      } else if (txReceipt?.status === false) {\n        console.log('false TXRECEIPT', txReceipt);\n      }\n    });\n  }, 5000);\n}\n\nexport async function repayAmount(amount, poolAddress, tokenAddress, callback){\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  let lender = await signer.getAddress();\n\n  let newAmount = (ethers.utils.parseUnits(amount.toString())).toString()\n  var contract = new web3.eth.Contract(repayContract, repayments);\n  var erc20contract = new web3.eth.Contract(ecr20abi, tokenAddress);\n\n  try {\n    await erc20contract.methods.approve(\n      poolAddress,\n      newAmount\n    ).send({ from: lender }, async (error, receipt) => {\n      if (error) {\n        console.log('APPROVE ERROR', error);\n        callback({ error: true, message: error.message });\n        return\n      }\n\n      const interval = setInterval(async () => {\n        web3.eth.getTransactionReceipt(receipt).then(async (txReceipt) => {\n          if (txReceipt?.status === true) {\n            clearInterval(interval);\n    \n            const isAllowed = await erc20contract.methods.allowance(lender, poolAddress).call()\n            console.log('isAllowed', isAllowed);\n            await contract.methods.repayAmount(lender, newAmount).send({ from: lender }, function async(err, res) {\n              if (err) {\n                console.log('LEND ERROR', err);\n                callback({ error: true, message: err.message });\n                return\n              }\n              if (res) {\n                console.log('LEND HASH', res);\n                onLendingSuccess(res, callback)\n              }\n            })\n    \n          } else if (txReceipt?.status === false) {\n            console.log('approve false TXRECEIPT', txReceipt);\n          }\n        });\n      }, 5000)\n    }); \n  } catch (error) {\n    if (error.message.includes('User denied transaction')) {\n      callback({ error: true, message: error.message });\n    } else {\n      callback({ error: true, message: 'Invalid values entered.' });\n    }\n  }\n\n  // const provider = new ethers.providers.Web3Provider(window.ethereum);\n  // const signer = provider.getSigner();\n  // console.log(amount,address);\n  // let newAmount = (ethers.utils.parseUnits(amount.toString())).toString()\n  // var contract = new ethers.Contract(addr, repayContract, provider);\n\n  // contract = contract.connect(signer);\n  // let borrower = await signer.getAddress();\n\n  // let borrowerTransactionConfig;\n  // if(borrowAssest == ethers.constants.AddressZero){\n  //   borrowerTransactionConfig = {\n  //     from:borrower,\n  //     gasPrice: \"1000000000\",\n  //     value: newAmount,\n  //   }\n  // } else {\n  //   borrowerTransactionConfig = {\n  //     from:borrower,\n  //     gasPrice: \"1000000000\"\n  //   }\n  // }\n\n  // await contract.functions\n  // .repayAmount(\n  //   address,amount,borrowerTransactionConfig\n  // ).then(console.log);\n}\n"]},"metadata":{},"sourceType":"module"}