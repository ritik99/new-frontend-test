{"ast":null,"code":"import request from 'request';\nimport { getSymbol } from './../../utility/symbol';\nimport { getLoanStartDay, countdown } from './../../utility/time';\nimport { ethers } from 'ethers';\nimport { SUBGRAPH_API_URL } from '../../utility/constants';\nexport function borrowMoreDetailPools(address, setpooldata) {\n  let result;\n  const data = JSON.stringify({\n    query: `  {\n            pools(where:{id:\"${address}\"}) {\n              id\n              idealCollateralRatio\n              borrowAmountRequested\n              collateralAsset\n              borrowAsset\n              borrowRate\n              borrowAmountRequested\n              lentAmount\n              loanStartTime\n              repaymentInterval\n              published\n              baseLiquidityShares\n              noOfRepaymentIntervals\n              borrower{\n                id \n                twitterDetails{\n                    twitterId\n                }\n              }\n            }\n          }\n        \n          `\n  });\n  console.log(data);\n  var options = {\n    'method': 'POST',\n    'url': SUBGRAPH_API_URL,\n    'headers': {\n      'Content-Type': 'application/json'\n    },\n    'body': data\n  };\n  result = request(options, async function (error, response) {\n    if (error) throw new Error(error);\n    var body = JSON.parse(response.body);\n    var pools = [];\n\n    if (body) {\n      if (body.data) {\n        if (body.data.pools && body.data.pools.length > 0) {\n          if (body.data.pools[0]) {\n            let poolData = body.data.pools[0];\n            var pool = {\n              collateralRatio: poolData.idealCollateralRatio + '%',\n              borrowed_amount: poolData.borrowAmountRequested / 10 ** 18 + ' ' + getSymbol(poolData.borrowAsset),\n              collateralAssest: getSymbol(poolData.collateralAsset),\n              borrowRate: poolData.borrowRate / 10 ** 8 + '%',\n              collectionProgress: Math.floor(poolData.lentAmount * 100 / poolData.borrowAmountRequested) + '%',\n              collectionEnds: getLoanStartDay(poolData.loanStartTime),\n              RepaymentFrequency: countdown(poolData.repaymentInterval),\n              publishedDate: new Date(parseInt(poolData.published) * 1000),\n              collateralAmount: poolData.baseLiquidityShares / 10 ** 18 + ' ' + getSymbol(poolData.collateralAsset),\n              LoanPeriod: countdown(poolData.repaymentInterval * poolData.noOfRepaymentIntervals),\n              name: ethers.utils.parseBytes32String(poolData.borrower.twitterDetails.twitterId),\n              username: '@' + ethers.utils.parseBytes32String(poolData.borrower.twitterDetails.twitterId)\n            };\n            setpooldata(pool);\n          }\n        }\n      }\n    }\n  });\n}\n;","map":{"version":3,"sources":["/Users/ritikdutta/Desktop/sublime-frontend/src/query/pool/borrowPoolDetails.js"],"names":["request","getSymbol","getLoanStartDay","countdown","ethers","SUBGRAPH_API_URL","borrowMoreDetailPools","address","setpooldata","result","data","JSON","stringify","query","console","log","options","error","response","Error","body","parse","pools","length","poolData","pool","collateralRatio","idealCollateralRatio","borrowed_amount","borrowAmountRequested","borrowAsset","collateralAssest","collateralAsset","borrowRate","collectionProgress","Math","floor","lentAmount","collectionEnds","loanStartTime","RepaymentFrequency","repaymentInterval","publishedDate","Date","parseInt","published","collateralAmount","baseLiquidityShares","LoanPeriod","noOfRepaymentIntervals","name","utils","parseBytes32String","borrower","twitterDetails","twitterId","username"],"mappings":"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","sourcesContent":["import request from 'request'\nimport {getSymbol} from './../../utility/symbol'\nimport {getLoanStartDay,countdown} from './../../utility/time'\nimport {ethers} from 'ethers'\nimport {SUBGRAPH_API_URL} from '../../utility/constants'\n\nexport function borrowMoreDetailPools(address,setpooldata){\n\n    let result;\n    const data = JSON.stringify({\n        query: `  {\n            pools(where:{id:\"${address}\"}) {\n              id\n              idealCollateralRatio\n              borrowAmountRequested\n              collateralAsset\n              borrowAsset\n              borrowRate\n              borrowAmountRequested\n              lentAmount\n              loanStartTime\n              repaymentInterval\n              published\n              baseLiquidityShares\n              noOfRepaymentIntervals\n              borrower{\n                id \n                twitterDetails{\n                    twitterId\n                }\n              }\n            }\n          }\n        \n          `\n    })\n    console.log(data)\n\n    var options = {\n        'method': 'POST',\n        'url': SUBGRAPH_API_URL,\n        'headers': {'Content-Type': 'application/json'},\n        'body': data\n    }       \n\n\n    result = request(options, async function (error, response) {\n\n        if (error) throw new Error(error); \n        var body = JSON.parse(response.body)\n        var pools = []\n        if(body){\n            if(body.data){\n                if(body.data.pools && body.data.pools.length>0){\n                    if(body.data.pools[0]){\n                        let poolData = body.data.pools[0]\n                        \n                        var pool = {\n                                    collateralRatio: poolData.idealCollateralRatio+'%',\n                                    borrowed_amount: ((poolData.borrowAmountRequested)/10**18)+ ' '+getSymbol(poolData.borrowAsset),\n                                    collateralAssest: getSymbol(poolData.collateralAsset),\n                                    borrowRate: (poolData.borrowRate)/10**8+'%',\n                                    collectionProgress:Math.floor((poolData.lentAmount*100)/poolData.borrowAmountRequested)+'%',\n                                    collectionEnds: getLoanStartDay( poolData.loanStartTime),\n                                    RepaymentFrequency:countdown(poolData.repaymentInterval),\n                                    publishedDate: new Date(parseInt(poolData.published)*1000),\n                                    collateralAmount : ((poolData.baseLiquidityShares)/10**18)+' '+getSymbol(poolData.collateralAsset),\n                                    LoanPeriod:countdown(poolData.repaymentInterval*poolData.noOfRepaymentIntervals),\n                                    name: ethers.utils.parseBytes32String(poolData.borrower.twitterDetails.twitterId),\n                                    username: '@'+ethers.utils.parseBytes32String(poolData.borrower.twitterDetails.twitterId),\n                                    }\n                        setpooldata(pool)\n                    }\n                }\n            }\n            \n        }\n        \n    })\n    \n};"]},"metadata":{},"sourceType":"module"}