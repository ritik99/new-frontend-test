{"ast":null,"code":"import { ethers } from \"ethers\";\nconst creditLineAddress = \"0xB642a5877Eb6511D75BdD0Bb9e4d31E251f99729\";\n\nconst creditLineContract = require(\"../../abi/creditLine.json\");\n\nexport async function requestCreditLineLender(lenderAddress, borrowLimit, liquidationThreshold, borrowRate, autoLiquidation, collateralRatio, borrowAsset, collateralAsset) {\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  var contract = new ethers.Contract(creditLineAddress, creditLineContract, provider);\n  let balance = await signer.getBalance();\n  contract = contract.connect(signer);\n  let borrower = await signer.getAddress();\n  const borrowerTransactionConfig = {\n    from: borrower,\n    gasPrice: \"1000000000\"\n  };\n  await contract.functions.requestCreditLineToLender(lenderAddress, borrowLimit, liquidationThreshold, borrowRate, autoLiquidation, collateralRatio, borrowAsset, collateralAsset, borrowerTransactionConfig).then(console.log);\n}","map":{"version":3,"sources":["/Users/ritikdutta/Desktop/sublime-frontend/src/contractTranscations/creditLine/creditLineRequest.js"],"names":["ethers","creditLineAddress","creditLineContract","require","requestCreditLineLender","lenderAddress","borrowLimit","liquidationThreshold","borrowRate","autoLiquidation","collateralRatio","borrowAsset","collateralAsset","provider","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","balance","getBalance","connect","borrower","getAddress","borrowerTransactionConfig","from","gasPrice","functions","requestCreditLineToLender","then","console","log"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AAEA,MAAMC,iBAAiB,GAAG,4CAA1B;;AACA,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,2BAAD,CAAlC;;AAGA,OAAO,eAAeC,uBAAf,CACLC,aADK,EAELC,WAFK,EAGLC,oBAHK,EAILC,UAJK,EAKLC,eALK,EAMLC,eANK,EAOLC,WAPK,EAQLC,eARK,EASL;AACA,QAAMC,QAAQ,GAAG,IAAIb,MAAM,CAACc,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,CAAjB;AACA,QAAMC,MAAM,GAAGL,QAAQ,CAACM,SAAT,EAAf;AACA,MAAIC,QAAQ,GAAG,IAAIpB,MAAM,CAACqB,QAAX,CAAoBpB,iBAApB,EAAuCC,kBAAvC,EAA2DW,QAA3D,CAAf;AAEA,MAAIS,OAAO,GAAG,MAAMJ,MAAM,CAACK,UAAP,EAApB;AACAH,EAAAA,QAAQ,GAAGA,QAAQ,CAACI,OAAT,CAAiBN,MAAjB,CAAX;AACA,MAAIO,QAAQ,GAAG,MAAMP,MAAM,CAACQ,UAAP,EAArB;AAEA,QAAMC,yBAAyB,GAAG;AAChCC,IAAAA,IAAI,EAAEH,QAD0B;AAEhCI,IAAAA,QAAQ,EAAE;AAFsB,GAAlC;AAIA,QAAMT,QAAQ,CAACU,SAAT,CACHC,yBADG,CAEF1B,aAFE,EAGFC,WAHE,EAIFC,oBAJE,EAKFC,UALE,EAMFC,eANE,EAOFC,eAPE,EAQFC,WARE,EASFC,eATE,EAUFe,yBAVE,EAYHK,IAZG,CAYEC,OAAO,CAACC,GAZV,CAAN;AAaD","sourcesContent":["import { ethers } from \"ethers\";\n\nconst creditLineAddress = \"0xB642a5877Eb6511D75BdD0Bb9e4d31E251f99729\";\nconst creditLineContract = require(\"../../abi/creditLine.json\");\n\n\nexport async function requestCreditLineLender(\n  lenderAddress,\n  borrowLimit,\n  liquidationThreshold,\n  borrowRate,\n  autoLiquidation,\n  collateralRatio,\n  borrowAsset,\n  collateralAsset\n) {\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  var contract = new ethers.Contract(creditLineAddress, creditLineContract, provider);\n\n  let balance = await signer.getBalance();\n  contract = contract.connect(signer);\n  let borrower = await signer.getAddress();\n\n  const borrowerTransactionConfig = {\n    from: borrower,\n    gasPrice: \"1000000000\",\n  };\n  await contract.functions\n    .requestCreditLineToLender(\n      lenderAddress,\n      borrowLimit,\n      liquidationThreshold,\n      borrowRate,\n      autoLiquidation,\n      collateralRatio,\n      borrowAsset,\n      collateralAsset,\n      borrowerTransactionConfig\n    )\n    .then(console.log);\n}\n"]},"metadata":{},"sourceType":"module"}