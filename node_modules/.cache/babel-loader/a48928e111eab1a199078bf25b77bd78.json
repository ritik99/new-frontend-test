{"ast":null,"code":"import { ethers } from \"ethers\";\nimport Web3 from \"web3\";\nimport { getConfiguredAddress } from '../utility/functions';\n\nconst ecr20abi = require(\"../abi/erc20.json\");\n\nconst web3 = new Web3(Web3.givenProvider);\nconst repayments = getConfiguredAddress('repayments');\n\nconst repayContract = require(\"../abi/repayment.json\");\n\nconst onRepaySuccess = (hash, callback) => {\n  const onCreateInterval = setInterval(async () => {\n    web3.eth.getTransactionReceipt(hash).then(txReceipt => {\n      if ((txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.status) === true) {\n        clearInterval(onCreateInterval);\n        console.log('true TXRECEIPT', txReceipt);\n        callback({\n          success: true\n        });\n      } else if ((txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.status) === false) {\n        console.log('false TXRECEIPT', txReceipt);\n      }\n    });\n  }, 5000);\n};\n\nexport async function repayAmount(amount, poolAddress, tokenAddress, callback) {\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  let lender = await signer.getAddress();\n  let newAmount = ethers.utils.parseUnits(amount.toString()).toString();\n  var contract = new web3.eth.Contract(repayContract, repayments);\n  var erc20contract = new web3.eth.Contract(ecr20abi, tokenAddress);\n  const isAllowed = await erc20contract.methods.allowance(lender, poolAddress).call();\n\n  try {\n    if (isAllowed && Number(isAllowed) >= Number(newAmount)) {\n      await contract.methods.repayAmount(poolAddress, newAmount).send({\n        from: lender\n      }, function async(err, res) {\n        if (err) {\n          console.log('REPAY ERROR', err);\n          callback({\n            error: true,\n            message: err.message\n          });\n          return;\n        }\n\n        if (res) {\n          console.log('REPAY HASH', res);\n          onRepaySuccess(res, callback);\n        }\n      });\n    } else {\n      await erc20contract.methods.approve(poolAddress, newAmount).send({\n        from: lender\n      }, async (error, receipt) => {\n        if (error) {\n          console.log('APPROVE ERROR', error);\n          callback({\n            error: true,\n            message: error.message\n          });\n          return;\n        }\n\n        const interval = setInterval(async () => {\n          web3.eth.getTransactionReceipt(receipt).then(async txReceipt => {\n            if ((txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.status) === true) {\n              clearInterval(interval);\n              await contract.methods.repayAmount(poolAddress, newAmount).send({\n                from: lender\n              }, function async(err, res) {\n                if (err) {\n                  console.log('REPAY ERROR', err);\n                  callback({\n                    error: true,\n                    message: err.message\n                  });\n                  return;\n                }\n\n                if (res) {\n                  console.log('REPAY HASH', res);\n                  onRepaySuccess(res, callback);\n                }\n              });\n            } else if ((txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.status) === false) {\n              console.log('approve false TXRECEIPT', txReceipt);\n            }\n          });\n        }, 5000);\n      });\n    }\n  } catch (error) {\n    if (error.message.includes('User denied transaction')) {\n      callback({\n        error: true,\n        message: error.message\n      });\n    } else {\n      callback({\n        error: true,\n        message: 'Invalid values entered.'\n      });\n    }\n  }\n}","map":{"version":3,"sources":["/Users/ritikdutta/Desktop/sublime-frontend/src/contractTranscations/repayment.js"],"names":["ethers","Web3","getConfiguredAddress","ecr20abi","require","web3","givenProvider","repayments","repayContract","onRepaySuccess","hash","callback","onCreateInterval","setInterval","eth","getTransactionReceipt","then","txReceipt","status","clearInterval","console","log","success","repayAmount","amount","poolAddress","tokenAddress","provider","providers","Web3Provider","window","ethereum","signer","getSigner","lender","getAddress","newAmount","utils","parseUnits","toString","contract","Contract","erc20contract","isAllowed","methods","allowance","call","Number","send","from","async","err","res","error","message","approve","receipt","interval","includes"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,oBAAT,QAAqC,sBAArC;;AAEA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB;;AACA,MAAMC,IAAI,GAAG,IAAIJ,IAAJ,CAASA,IAAI,CAACK,aAAd,CAAb;AAEA,MAAMC,UAAU,GAAGL,oBAAoB,CAAC,YAAD,CAAvC;;AACA,MAAMM,aAAa,GAAGJ,OAAO,CAAC,uBAAD,CAA7B;;AAEA,MAAMK,cAAc,GAAG,CAACC,IAAD,EAAOC,QAAP,KAAoB;AACzC,QAAMC,gBAAgB,GAAGC,WAAW,CAAC,YAAY;AAC/CR,IAAAA,IAAI,CAACS,GAAL,CAASC,qBAAT,CAA+BL,IAA/B,EAAqCM,IAArC,CAA2CC,SAAD,IAAe;AACvD,UAAI,CAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEC,MAAX,MAAsB,IAA1B,EAAgC;AAC9BC,QAAAA,aAAa,CAACP,gBAAD,CAAb;AAEAQ,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BJ,SAA9B;AACAN,QAAAA,QAAQ,CAAC;AAAEW,UAAAA,OAAO,EAAE;AAAX,SAAD,CAAR;AACD,OALD,MAKO,IAAI,CAAAL,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEC,MAAX,MAAsB,KAA1B,EAAiC;AACtCE,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BJ,SAA/B;AACD;AACF,KATD;AAUD,GAXmC,EAWjC,IAXiC,CAApC;AAYD,CAbD;;AAeA,OAAO,eAAeM,WAAf,CAA2BC,MAA3B,EAAmCC,WAAnC,EAAgDC,YAAhD,EAA8Df,QAA9D,EAAuE;AAC5E,QAAMgB,QAAQ,GAAG,IAAI3B,MAAM,CAAC4B,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,CAAjB;AACA,QAAMC,MAAM,GAAGL,QAAQ,CAACM,SAAT,EAAf;AACA,MAAIC,MAAM,GAAG,MAAMF,MAAM,CAACG,UAAP,EAAnB;AAEA,MAAIC,SAAS,GAAIpC,MAAM,CAACqC,KAAP,CAAaC,UAAb,CAAwBd,MAAM,CAACe,QAAP,EAAxB,CAAD,CAA6CA,QAA7C,EAAhB;AACA,MAAIC,QAAQ,GAAG,IAAInC,IAAI,CAACS,GAAL,CAAS2B,QAAb,CAAsBjC,aAAtB,EAAqCD,UAArC,CAAf;AACA,MAAImC,aAAa,GAAG,IAAIrC,IAAI,CAACS,GAAL,CAAS2B,QAAb,CAAsBtC,QAAtB,EAAgCuB,YAAhC,CAApB;AAEA,QAAMiB,SAAS,GAAG,MAAMD,aAAa,CAACE,OAAd,CAAsBC,SAAtB,CAAgCX,MAAhC,EAAwCT,WAAxC,EAAqDqB,IAArD,EAAxB;;AAEA,MAAI;AACF,QAAIH,SAAS,IAAII,MAAM,CAACJ,SAAD,CAAN,IAAqBI,MAAM,CAACX,SAAD,CAA5C,EAAyD;AACvD,YAAMI,QAAQ,CAACI,OAAT,CAAiBrB,WAAjB,CAA6BE,WAA7B,EAA0CW,SAA1C,EAAqDY,IAArD,CAA0D;AAAEC,QAAAA,IAAI,EAAEf;AAAR,OAA1D,EAA4E,SAASgB,KAAT,CAAeC,GAAf,EAAoBC,GAApB,EAAyB;AACzG,YAAID,GAAJ,EAAS;AACP/B,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B8B,GAA3B;AACAxC,UAAAA,QAAQ,CAAC;AAAE0C,YAAAA,KAAK,EAAE,IAAT;AAAeC,YAAAA,OAAO,EAAEH,GAAG,CAACG;AAA5B,WAAD,CAAR;AACA;AACD;;AACD,YAAIF,GAAJ,EAAS;AACPhC,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B+B,GAA1B;AACA3C,UAAAA,cAAc,CAAC2C,GAAD,EAAMzC,QAAN,CAAd;AACD;AACF,OAVK,CAAN;AAWD,KAZD,MAYO;AACL,YAAM+B,aAAa,CAACE,OAAd,CAAsBW,OAAtB,CACJ9B,WADI,EAEJW,SAFI,EAGJY,IAHI,CAGC;AAAEC,QAAAA,IAAI,EAAEf;AAAR,OAHD,EAGmB,OAAOmB,KAAP,EAAcG,OAAd,KAA0B;AACjD,YAAIH,KAAJ,EAAW;AACTjC,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BgC,KAA7B;AACA1C,UAAAA,QAAQ,CAAC;AAAE0C,YAAAA,KAAK,EAAE,IAAT;AAAeC,YAAAA,OAAO,EAAED,KAAK,CAACC;AAA9B,WAAD,CAAR;AACA;AACD;;AAED,cAAMG,QAAQ,GAAG5C,WAAW,CAAC,YAAY;AACvCR,UAAAA,IAAI,CAACS,GAAL,CAASC,qBAAT,CAA+ByC,OAA/B,EAAwCxC,IAAxC,CAA6C,MAAOC,SAAP,IAAqB;AAChE,gBAAI,CAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEC,MAAX,MAAsB,IAA1B,EAAgC;AAC9BC,cAAAA,aAAa,CAACsC,QAAD,CAAb;AACA,oBAAMjB,QAAQ,CAACI,OAAT,CAAiBrB,WAAjB,CAA6BE,WAA7B,EAA0CW,SAA1C,EAAqDY,IAArD,CAA0D;AAAEC,gBAAAA,IAAI,EAAEf;AAAR,eAA1D,EAA4E,SAASgB,KAAT,CAAeC,GAAf,EAAoBC,GAApB,EAAyB;AACzG,oBAAID,GAAJ,EAAS;AACP/B,kBAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B8B,GAA3B;AACAxC,kBAAAA,QAAQ,CAAC;AAAE0C,oBAAAA,KAAK,EAAE,IAAT;AAAeC,oBAAAA,OAAO,EAAEH,GAAG,CAACG;AAA5B,mBAAD,CAAR;AACA;AACD;;AACD,oBAAIF,GAAJ,EAAS;AACPhC,kBAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B+B,GAA1B;AACA3C,kBAAAA,cAAc,CAAC2C,GAAD,EAAMzC,QAAN,CAAd;AACD;AACF,eAVK,CAAN;AAYD,aAdD,MAcO,IAAI,CAAAM,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEC,MAAX,MAAsB,KAA1B,EAAiC;AACtCE,cAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCJ,SAAvC;AACD;AACF,WAlBD;AAmBD,SApB2B,EAoBzB,IApByB,CAA5B;AAqBD,OA/BK,CAAN;AAgCD;AACF,GA/CD,CA+CE,OAAOoC,KAAP,EAAc;AACd,QAAIA,KAAK,CAACC,OAAN,CAAcI,QAAd,CAAuB,yBAAvB,CAAJ,EAAuD;AACrD/C,MAAAA,QAAQ,CAAC;AAAE0C,QAAAA,KAAK,EAAE,IAAT;AAAeC,QAAAA,OAAO,EAAED,KAAK,CAACC;AAA9B,OAAD,CAAR;AACD,KAFD,MAEO;AACL3C,MAAAA,QAAQ,CAAC;AAAE0C,QAAAA,KAAK,EAAE,IAAT;AAAeC,QAAAA,OAAO,EAAE;AAAxB,OAAD,CAAR;AACD;AACF;AACF","sourcesContent":["import { ethers } from \"ethers\";\nimport Web3 from \"web3\"\nimport { getConfiguredAddress } from '../utility/functions'\n\nconst ecr20abi = require(\"../abi/erc20.json\");\nconst web3 = new Web3(Web3.givenProvider);\n\nconst repayments = getConfiguredAddress('repayments');\nconst repayContract = require(\"../abi/repayment.json\");\n\nconst onRepaySuccess = (hash, callback) => {\n  const onCreateInterval = setInterval(async () => {\n    web3.eth.getTransactionReceipt(hash).then((txReceipt) => {\n      if (txReceipt?.status === true) {\n        clearInterval(onCreateInterval);\n\n        console.log('true TXRECEIPT', txReceipt);\n        callback({ success: true });\n      } else if (txReceipt?.status === false) {\n        console.log('false TXRECEIPT', txReceipt);\n      }\n    });\n  }, 5000);\n}\n\nexport async function repayAmount(amount, poolAddress, tokenAddress, callback){\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  let lender = await signer.getAddress();\n\n  let newAmount = (ethers.utils.parseUnits(amount.toString())).toString()\n  var contract = new web3.eth.Contract(repayContract, repayments);\n  var erc20contract = new web3.eth.Contract(ecr20abi, tokenAddress);\n\n  const isAllowed = await erc20contract.methods.allowance(lender, poolAddress).call()\n\n  try {\n    if (isAllowed && Number(isAllowed) >= Number(newAmount)) {\n      await contract.methods.repayAmount(poolAddress, newAmount).send({ from: lender }, function async(err, res) {\n        if (err) {\n          console.log('REPAY ERROR', err);\n          callback({ error: true, message: err.message });\n          return\n        }\n        if (res) {\n          console.log('REPAY HASH', res);\n          onRepaySuccess(res, callback)\n        }\n      })\n    } else {\n      await erc20contract.methods.approve(\n        poolAddress,\n        newAmount\n      ).send({ from: lender }, async (error, receipt) => {\n        if (error) {\n          console.log('APPROVE ERROR', error);\n          callback({ error: true, message: error.message });\n          return\n        }\n  \n        const interval = setInterval(async () => {\n          web3.eth.getTransactionReceipt(receipt).then(async (txReceipt) => {\n            if (txReceipt?.status === true) {\n              clearInterval(interval);\n              await contract.methods.repayAmount(poolAddress, newAmount).send({ from: lender }, function async(err, res) {\n                if (err) {\n                  console.log('REPAY ERROR', err);\n                  callback({ error: true, message: err.message });\n                  return\n                }\n                if (res) {\n                  console.log('REPAY HASH', res);\n                  onRepaySuccess(res, callback)\n                }\n              })\n      \n            } else if (txReceipt?.status === false) {\n              console.log('approve false TXRECEIPT', txReceipt);\n            }\n          });\n        }, 5000)\n      });\n    }\n  } catch (error) {\n    if (error.message.includes('User denied transaction')) {\n      callback({ error: true, message: error.message });\n    } else {\n      callback({ error: true, message: 'Invalid values entered.' });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}