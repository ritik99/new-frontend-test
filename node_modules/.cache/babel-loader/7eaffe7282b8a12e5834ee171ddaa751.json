{"ast":null,"code":"import request from 'request';\nimport { getSymbol } from './../../utility/symbol';\nimport { SUBGRAPH_API_URL } from '../../utility/constants';\nimport { getSupportedTokens } from '../../utility/functions';\nexport function collateralborrowPools(address, setpooldata) {\n  let result;\n  const data = JSON.stringify({\n    query: `  {\n            pools(where:{id:\"${address}\"}) {\n              id\n              idealCollateralRatio\n              borrowAmountRequested\n              collateralAsset\n              borrowAsset\n            }\n        }`\n  });\n  var options = {\n    'method': 'POST',\n    'url': SUBGRAPH_API_URL,\n    'headers': {\n      'Content-Type': 'application/json'\n    },\n    'body': data\n  };\n  result = request(options, async function (error, response) {\n    if (error) throw new Error(error);\n    var body = JSON.parse(response.body);\n    var pools = [];\n\n    if (body) {\n      if (body.data) {\n        if (body.data.pools && body.data.pools.length > 0) {\n          if (body.data.pools[0]) {\n            let poolData = body.data.pools[0];\n            const collateralAssest = getSupportedTokens('collateralTokens').find(token => token.address.toLowerCase() === poolData.collateralAsset.toLowerCase());\n            const borrowAsset = getSupportedTokens('borrowTokens').find(token => token.address.toLowerCase() === poolData.borrowAsset.toLowerCase());\n            var pool = {\n              collateralRatio: poolData.idealCollateralRatio / 10 ** 8 + '%',\n              borrowed_amount: poolData.borrowAmountRequested / 10 ** 18 + ' ' + getSymbol(poolData.borrowAsset),\n              collateralAssest,\n              borrowAsset\n            };\n            setpooldata(pool);\n          }\n        }\n      }\n    }\n  });\n}\n;","map":{"version":3,"sources":["/Users/ritikdutta/Desktop/sublime-frontend/src/query/pool/addCollateral.js"],"names":["request","getSymbol","SUBGRAPH_API_URL","getSupportedTokens","collateralborrowPools","address","setpooldata","result","data","JSON","stringify","query","options","error","response","Error","body","parse","pools","length","poolData","collateralAssest","find","token","toLowerCase","collateralAsset","borrowAsset","pool","collateralRatio","idealCollateralRatio","borrowed_amount","borrowAmountRequested"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,SAAQC,SAAR,QAAwB,wBAAxB;AACA,SAAQC,gBAAR,QAA+B,yBAA/B;AACA,SAASC,kBAAT,QAAmC,yBAAnC;AAGA,OAAO,SAASC,qBAAT,CAA+BC,OAA/B,EAAwCC,WAAxC,EAAoD;AACvD,MAAIC,MAAJ;AACA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AACxBC,IAAAA,KAAK,EAAG;AAChB,+BAA+BN,OAAQ;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AATgC,GAAf,CAAb;AAYA,MAAIO,OAAO,GAAG;AACV,cAAU,MADA;AAEV,WAAOV,gBAFG;AAGV,eAAW;AAAC,sBAAgB;AAAjB,KAHD;AAIV,YAAQM;AAJE,GAAd;AAQAD,EAAAA,MAAM,GAAGP,OAAO,CAACY,OAAD,EAAU,gBAAgBC,KAAhB,EAAuBC,QAAvB,EAAiC;AAEvD,QAAID,KAAJ,EAAW,MAAM,IAAIE,KAAJ,CAAUF,KAAV,CAAN;AACX,QAAIG,IAAI,GAAGP,IAAI,CAACQ,KAAL,CAAWH,QAAQ,CAACE,IAApB,CAAX;AACA,QAAIE,KAAK,GAAG,EAAZ;;AACA,QAAGF,IAAH,EAAQ;AACJ,UAAGA,IAAI,CAACR,IAAR,EAAa;AACT,YAAGQ,IAAI,CAACR,IAAL,CAAUU,KAAV,IAAmBF,IAAI,CAACR,IAAL,CAAUU,KAAV,CAAgBC,MAAhB,GAAuB,CAA7C,EAA+C;AAC3C,cAAGH,IAAI,CAACR,IAAL,CAAUU,KAAV,CAAgB,CAAhB,CAAH,EAAsB;AAClB,gBAAIE,QAAQ,GAAGJ,IAAI,CAACR,IAAL,CAAUU,KAAV,CAAgB,CAAhB,CAAf;AACA,kBAAMG,gBAAgB,GAAGlB,kBAAkB,CAAC,kBAAD,CAAlB,CAAuCmB,IAAvC,CAA6CC,KAAD,IAAWA,KAAK,CAAClB,OAAN,CAAcmB,WAAd,OAAgCJ,QAAQ,CAACK,eAAT,CAAyBD,WAAzB,EAAvF,CAAzB;AACA,kBAAME,WAAW,GAAGvB,kBAAkB,CAAC,cAAD,CAAlB,CAAmCmB,IAAnC,CAAyCC,KAAD,IAAWA,KAAK,CAAClB,OAAN,CAAcmB,WAAd,OAAgCJ,QAAQ,CAACM,WAAT,CAAqBF,WAArB,EAAnF,CAApB;AACA,gBAAIG,IAAI,GAAG;AACPC,cAAAA,eAAe,EAAGR,QAAQ,CAACS,oBAAV,GAAgC,MAAI,CAApC,GAAsC,GADhD;AAEPC,cAAAA,eAAe,EAAGV,QAAQ,CAACW,qBAAV,GAAiC,MAAI,EAArC,GAAyC,GAAzC,GAA6C9B,SAAS,CAACmB,QAAQ,CAACM,WAAV,CAFhE;AAGPL,cAAAA,gBAHO;AAIPK,cAAAA;AAJO,aAAX;AAMApB,YAAAA,WAAW,CAACqB,IAAD,CAAX;AACH;AACJ;AACJ;AAEJ;AAEJ,GAzBe,CAAhB;AA2BH;AAAA","sourcesContent":["import request from 'request'\nimport {getSymbol} from './../../utility/symbol'\nimport {SUBGRAPH_API_URL} from '../../utility/constants'\nimport { getSupportedTokens } from '../../utility/functions';\n\n\nexport function collateralborrowPools(address, setpooldata){\n    let result;\n    const data = JSON.stringify({\n        query: `  {\n            pools(where:{id:\"${address}\"}) {\n              id\n              idealCollateralRatio\n              borrowAmountRequested\n              collateralAsset\n              borrowAsset\n            }\n        }`\n    })\n\n    var options = {\n        'method': 'POST',\n        'url': SUBGRAPH_API_URL,\n        'headers': {'Content-Type': 'application/json'},\n        'body': data\n    }       \n\n\n    result = request(options, async function (error, response) {\n\n        if (error) throw new Error(error); \n        var body = JSON.parse(response.body)\n        var pools = []\n        if(body){\n            if(body.data){\n                if(body.data.pools && body.data.pools.length>0){\n                    if(body.data.pools[0]){\n                        let poolData = body.data.pools[0]\n                        const collateralAssest = getSupportedTokens('collateralTokens').find((token) => token.address.toLowerCase() === poolData.collateralAsset.toLowerCase())\n                        const borrowAsset = getSupportedTokens('borrowTokens').find((token) => token.address.toLowerCase() === poolData.borrowAsset.toLowerCase())\n                        var pool = {\n                            collateralRatio: (poolData.idealCollateralRatio)/10**8+'%',\n                            borrowed_amount: (poolData.borrowAmountRequested)/10**18+ ' '+getSymbol(poolData.borrowAsset),\n                            collateralAssest,\n                            borrowAsset\n                        }\n                        setpooldata(pool)\n                    }\n                }\n            }\n            \n        }\n        \n    })\n    \n};"]},"metadata":{},"sourceType":"module"}