{"ast":null,"code":"import { ethers } from \"ethers\";\nimport Web3 from \"web3\";\nconst web3 = new Web3(Web3.givenProvider);\n\nconst poolContract = require(\"../abi/pool.json\");\n\nconst poolContractMeta = require(\"../abi/artifacts/contracts/Pool/Pool.sol/Pool.json\");\n\nconst ecr20abi = require(\"../abi/erc20.json\");\n\nconst _interface = new ethers.utils.Interface(poolContractMeta.abi);\n\nconst initializeFragement = _interface.getFunction(\"depositCollateral\");\n\nconst onLendingSuccess = (hash, callback) => {\n  const onCreateInterval = setInterval(async () => {\n    web3.eth.getTransactionReceipt(hash).then(txReceipt => {\n      if ((txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.status) === true) {\n        clearInterval(onCreateInterval);\n        console.log('true TXRECEIPT', txReceipt);\n        callback({\n          success: true\n        });\n      } else if ((txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.status) === false) {\n        console.log('false TXRECEIPT', txReceipt);\n      }\n    });\n  }, 5000);\n};\n\nexport async function addCollateral(amount, poolAddress, tokenAddress, callback) {\n  let newAmount = ethers.utils.parseUnits(amount.toString()).toString();\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  let lender = await signer.getAddress();\n\n  const result = _interface.encodeFunctionData(initializeFragement, [newAmount, false]);\n\n  var contract = new web3.eth.Contract(poolContract, poolAddress);\n  var erc20contract = new web3.eth.Contract(ecr20abi, tokenAddress);\n  const isAllowed = await erc20contract.methods.allowance(lender, poolAddress).call();\n\n  try {\n    if (isAllowed && Number(isAllowed) >= Number(newAmount)) {\n      await contract.methods.depositCollateral(newAmount, false).send({\n        from: lender\n      }, function async(err, res) {\n        if (err) {\n          console.log('addCollateral ERROR', err);\n          callback({\n            error: true,\n            message: err.message\n          });\n          return;\n        }\n\n        if (res) {\n          console.log('addCollateral HASH', res);\n          onLendingSuccess(res, callback);\n        }\n      });\n    } else {\n      await erc20contract.methods.approve(poolAddress, newAmount).send({\n        from: lender\n      }, async (error, receipt) => {\n        if (error) {\n          callback({\n            error: true,\n            message: error.message\n          });\n          return;\n        }\n\n        const interval = setInterval(async () => {\n          web3.eth.getTransactionReceipt(receipt).then(async txReceipt => {\n            if ((txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.status) === true) {\n              clearInterval(interval);\n              await contract.methods.depositCollateral(newAmount, false).send({\n                from: lender\n              }, function async(err, res) {\n                if (err) {\n                  console.log('addCollateral ERROR', err);\n                  callback({\n                    error: true,\n                    message: err.message\n                  });\n                  return;\n                }\n\n                if (res) {\n                  console.log('addCollateral HASH', res);\n                  onLendingSuccess(res, callback);\n                }\n              });\n            } else if ((txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.status) === false) {\n              console.log('approve false TXRECEIPT', txReceipt);\n            }\n          });\n        }, 5000);\n      });\n    }\n  } catch (error) {\n    if (error.message.includes('User denied transaction')) {\n      callback({\n        error: true,\n        message: error.message\n      });\n    } else {\n      callback({\n        error: true,\n        message: 'Invalid values entered.'\n      });\n    }\n  }\n}","map":{"version":3,"sources":["/Users/ritikdutta/Desktop/sublime-frontend/src/contractTranscations/addCollateral.js"],"names":["ethers","Web3","web3","givenProvider","poolContract","require","poolContractMeta","ecr20abi","_interface","utils","Interface","abi","initializeFragement","getFunction","onLendingSuccess","hash","callback","onCreateInterval","setInterval","eth","getTransactionReceipt","then","txReceipt","status","clearInterval","console","log","success","addCollateral","amount","poolAddress","tokenAddress","newAmount","parseUnits","toString","provider","providers","Web3Provider","window","ethereum","signer","getSigner","lender","getAddress","result","encodeFunctionData","contract","Contract","erc20contract","isAllowed","methods","allowance","call","Number","depositCollateral","send","from","async","err","res","error","message","approve","receipt","interval","includes"],"mappings":"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","sourcesContent":["import { ethers } from \"ethers\";\nimport Web3 from \"web3\";\nconst web3 = new Web3(Web3.givenProvider);\n\n\n\nconst poolContract = require(\"../abi/pool.json\");\nconst poolContractMeta = require(\"../abi/artifacts/contracts/Pool/Pool.sol/Pool.json\");\nconst ecr20abi = require(\"../abi/erc20.json\");\n\nconst _interface = new ethers.utils.Interface(poolContractMeta.abi);\nconst initializeFragement = _interface.getFunction(\"depositCollateral\");\n\nconst onLendingSuccess = (hash, callback) => {\n  const onCreateInterval = setInterval(async () => {\n    web3.eth.getTransactionReceipt(hash).then((txReceipt) => {\n      if (txReceipt?.status === true) {\n        clearInterval(onCreateInterval);\n\n        console.log('true TXRECEIPT', txReceipt);\n        callback({ success: true });\n      } else if (txReceipt?.status === false) {\n        console.log('false TXRECEIPT', txReceipt);\n      }\n    });\n  }, 5000);\n}\n\n\nexport async function addCollateral(amount, poolAddress, tokenAddress, callback){\n  let newAmount = (ethers.utils.parseUnits(amount.toString())).toString()\n\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  let lender = await signer.getAddress();\n\n  const result = _interface.encodeFunctionData(initializeFragement, [\n    newAmount,\n    false\n  ]);\n\n  var contract = new web3.eth.Contract(poolContract, poolAddress);\n  var erc20contract = new web3.eth.Contract(ecr20abi, tokenAddress);\n\n  const isAllowed = await erc20contract.methods.allowance(lender, poolAddress).call()\n\n  try {\n    if (isAllowed && Number(isAllowed) >= Number(newAmount)) {\n      await contract.methods.depositCollateral(newAmount, false).send({ from: lender }, function async(err, res) {\n        if (err) {\n          console.log('addCollateral ERROR', err);\n          callback({ error: true, message: err.message });\n          return\n        }\n        if (res) {\n          console.log('addCollateral HASH', res);\n          onLendingSuccess(res, callback)\n        }\n      })\n\n    } else {\n      await erc20contract.methods.approve(\n        poolAddress,\n        newAmount\n      ).send({ from: lender }, async (error, receipt) => {\n        if (error) {\n          callback({ error: true, message: error.message });\n          return\n        }\n\n        const interval = setInterval(async () => {\n          web3.eth.getTransactionReceipt(receipt).then(async (txReceipt) => {\n            if (txReceipt?.status === true) {\n              clearInterval(interval);\n                await contract.methods.depositCollateral(newAmount, false).send({ from: lender }, function async(err, res) {\n                  if (err) {\n                    console.log('addCollateral ERROR', err);\n                    callback({ error: true, message: err.message });\n                    return\n                  }\n                  if (res) {\n                    console.log('addCollateral HASH', res);\n                    onLendingSuccess(res, callback)\n                  }\n                })\n      \n            } else if (txReceipt?.status === false) {\n              console.log('approve false TXRECEIPT', txReceipt);\n            }\n          });\n        }, 5000)\n      });\n    }\n  } catch (error) {\n    if (error.message.includes('User denied transaction')) {\n      callback({ error: true, message: error.message });\n    } else {\n      callback({ error: true, message: 'Invalid values entered.' });\n    }\n  }\n}\n\n\n    \n"]},"metadata":{},"sourceType":"module"}