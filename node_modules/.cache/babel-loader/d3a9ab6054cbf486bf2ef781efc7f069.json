{"ast":null,"code":"import request from 'request'; // const Web3 = require(\"web3\");\n\nimport Web3 from \"web3\";\nconst web3 = new Web3(\"https://kovan.infura.io/v3/9dc997986f8840daa0e6ccb1d8d0d757\");\nconst aggregatorV3InterfaceABI = [{\n  \"inputs\": [],\n  \"name\": \"decimals\",\n  \"outputs\": [{\n    \"internalType\": \"uint8\",\n    \"name\": \"\",\n    \"type\": \"uint8\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [],\n  \"name\": \"description\",\n  \"outputs\": [{\n    \"internalType\": \"string\",\n    \"name\": \"\",\n    \"type\": \"string\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [{\n    \"internalType\": \"uint80\",\n    \"name\": \"_roundId\",\n    \"type\": \"uint80\"\n  }],\n  \"name\": \"getRoundData\",\n  \"outputs\": [{\n    \"internalType\": \"uint80\",\n    \"name\": \"roundId\",\n    \"type\": \"uint80\"\n  }, {\n    \"internalType\": \"int256\",\n    \"name\": \"answer\",\n    \"type\": \"int256\"\n  }, {\n    \"internalType\": \"uint256\",\n    \"name\": \"startedAt\",\n    \"type\": \"uint256\"\n  }, {\n    \"internalType\": \"uint256\",\n    \"name\": \"updatedAt\",\n    \"type\": \"uint256\"\n  }, {\n    \"internalType\": \"uint80\",\n    \"name\": \"answeredInRound\",\n    \"type\": \"uint80\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [],\n  \"name\": \"latestRoundData\",\n  \"outputs\": [{\n    \"internalType\": \"uint80\",\n    \"name\": \"roundId\",\n    \"type\": \"uint80\"\n  }, {\n    \"internalType\": \"int256\",\n    \"name\": \"answer\",\n    \"type\": \"int256\"\n  }, {\n    \"internalType\": \"uint256\",\n    \"name\": \"startedAt\",\n    \"type\": \"uint256\"\n  }, {\n    \"internalType\": \"uint256\",\n    \"name\": \"updatedAt\",\n    \"type\": \"uint256\"\n  }, {\n    \"internalType\": \"uint80\",\n    \"name\": \"answeredInRound\",\n    \"type\": \"uint80\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"inputs\": [],\n  \"name\": \"version\",\n  \"outputs\": [{\n    \"internalType\": \"uint256\",\n    \"name\": \"\",\n    \"type\": \"uint256\"\n  }],\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}]; // const request = require('request')\n\nexport function getTotalBorrowedAmount(address, setTotalBorrowAmount) {\n  const Data = JSON.stringify({\n    query: `{\n            pools(where:{borrowerAddress:\"${address}\"}) {\n                poolConstants {\n                    borrowRate\n                    loanStartTime\n                } \n                poolToken {\n                    totalSupply\n                }\n                repaymentVars {\n                    loanDurationCovered\n                }\n            }\n          } \n          `\n  });\n  var options = {\n    'method': 'POST',\n    'url': 'https://api.thegraph.com/subgraphs/name/sublime-finance/sublime',\n    'headers': {\n      'Content-Type': 'application/json'\n    },\n    'body': Data\n  };\n  request(options, async function (error, response) {\n    if (error) throw new Error(error);\n    var body = JSON.parse(response.body);\n    console.log(body);\n    let interestAccrued = 0;\n\n    if (body) {\n      if (body.data) {\n        if (body.data.pools && body.data.pools.length > 0) {\n          body.data.pools.forEach(pool => {\n            //Date.now() is not same as block.timestamp it should be quieried from blockchain but i wanted to keep it simple\n            let loanDurationTillNow = (Date.now() - parseInt(pool.poolConstants.loanStartTime)) * 10 ** 30;\n\n            if (loanDurationTillNow > parseInt(pool.repaymentVars.loanDurationCovered)) {\n              let interestPerSecond = parseInt(pool.poolConstants.borrowRate) * parseInt(pool.poolToken.totalSupply) / (364 * 3600 * 24);\n              interestAccrued += interestPerSecond * (loanDurationTillNow - parseInt(pool.repaymentVars.loanDurationCovered)) / 10 ** 60;\n            }\n          });\n        }\n\n        setTotalBorrowAmount(interestAccrued);\n      } else setTotalBorrowAmount(null);\n    }\n  });\n}\nexport function getBorrowRate(address, setTotalBorrowRate) {\n  const data = JSON.stringify({\n    query: `{\n            pools(where:{borrowerAddress:\"${address}\"}) {\n                poolConstants {\n                    borrowRate\n                } \n                poolToken {\n                    totalSupply\n                }\n            }\n          } \n          `\n  });\n  var options = {\n    'method': 'POST',\n    'url': 'https://api.thegraph.com/subgraphs/name/sublime-finance/sublime',\n    'headers': {\n      'Content-Type': 'application/json'\n    },\n    'body': data\n  };\n  request(options, async function (error, response) {\n    if (error) throw new Error(error);\n    var body = JSON.parse(response.body);\n    console.log(body);\n    let totalBorrow = 0;\n\n    if (body) {\n      if (body.data) {\n        if (body.data.pools && body.data.pools.length > 0) {\n          body.data.pools.forEach(pool => {\n            totalBorrow += parseInt(pool.poolConstants.borrowRate) * parseInt(pool.poolToken.totalSupply) / 10 ** 18;\n          });\n        }\n\n        setTotalBorrowRate(totalBorrow);\n      } else setTotalBorrowRate(null);\n    }\n  });\n}\nexport function getNextRepaymentDeadline(address, setNextRepaymentDeadline) {\n  const data = JSON.stringify({\n    query: `{\n            pools(where:{borrowerAddress:\"${address}\"}) {\n                repaymentVars { \n                  nextInstalmentDeadline \n                }  \n            }\n          } \n          `\n  });\n  var options = {\n    'method': 'POST',\n    'url': 'https://api.thegraph.com/subgraphs/name/sublime-finance/sublime',\n    'headers': {\n      'Content-Type': 'application/json'\n    },\n    'body': data\n  };\n  request(options, async function (error, response) {\n    if (error) throw new Error(error);\n    var body = JSON.parse(response.body);\n    let nextDeadline = null;\n\n    if (body) {\n      if (body.data) {\n        if (body.data.pools && body.data.pools.length > 0) {\n          let next;\n          body.data.pools.forEach(pool => {\n            next = parseInt(pool.repaymentVars.nextInstalmentDeadline);\n            if (next > Date.now() && next < nextDeadline) nextDeadline = next;\n          });\n        }\n\n        if (nextDeadline != null) {\n          let deadlineformat = [nextDeadline.getMonth() + 1, nextDeadline.getDate(), nextDeadline.getFullYear()].join('/') + ' ' + [nextDeadline.getHours(), nextDeadline.getMinutes(), nextDeadline.getSeconds()].join(':');\n          setNextRepaymentDeadline(deadlineformat);\n        } else setNextRepaymentDeadline(\"no upcoming deadline\");\n      } else setNextRepaymentDeadline(null);\n    }\n  });\n}\nexport function getTotalLendAmount(address, setTotalLendAmount) {\n  console.log(\"working\");\n  const data = JSON.stringify({\n    query: `{\n            lendingDetailscopies(where:{lender:\"${address}\",loanStatus:\"Active\"}){\n             id\n             AmountLend\n             pool{\n                borrowAsset\n              }\n           }\n           }            \n          `\n  });\n  var options = {\n    'method': 'POST',\n    'url': 'https://api.thegraph.com/subgraphs/name/sublime-finance/sublime',\n    'headers': {\n      'Content-Type': 'application/json'\n    },\n    'body': data\n  };\n  request(options, async function (error, response) {\n    if (error) throw new Error(error);\n    var body = JSON.parse(response.body);\n    let totalLend = 0;\n\n    if (body) {\n      if (body.data) {\n        console.log(body.data);\n\n        if (body.data.lendingDetailscopies && body.data.lendingDetailscopies.length > 0) {\n          for (var i = 0; i < body.data.lendingDetailscopies.length; i++) {\n            let addr;\n\n            if (body.data.lendingDetailscopies[i].pool.borrowAsset = \"0x0000000000000000000000000000000000000000\") {\n              addr = \"0x9326BFA02ADD2366b30bacB125260Af641031331\";\n            }\n\n            const priceFeed = new web3.eth.Contract(aggregatorV3InterfaceABI, addr);\n            let roundData = (await priceFeed.methods.latestRoundData().call()).answer / 10 ** 8;\n            totalLend += roundData * (parseInt(body.data.lendingDetailscopies[i].AmountLend) / 10 ** 18);\n          }\n\n          if (body.data.lendingDetailscopies.length == 0) {\n            setTotalLendAmount(0);\n          } else {\n            setTotalLendAmount(totalLend);\n          }\n        }\n      }\n    }\n  });\n}\nexport function getLendRate(address, setTotalLendRate) {\n  const data = JSON.stringify({\n    query: `{\n            pools(where:{borrower:\"${address}\",loanStatus:\"Active\"}) {\n                borrowRate\n            }\n          } \n          `\n  });\n  var options = {\n    'method': 'POST',\n    'url': 'https://api.thegraph.com/subgraphs/name/sublime-finance/sublime',\n    'headers': {\n      'Content-Type': 'application/json'\n    },\n    'body': data\n  };\n  let s = 0;\n  request(options, async function (error, response) {\n    if (error) throw new Error(error);\n    var body = JSON.parse(response.body);\n    let totalBorrowRate = 0;\n\n    if (body) {\n      if (body.data) {\n        if (body.data.pools && body.data.pools.length > 0) {\n          for (var pool = 0; pool < body.data.pools.length; pool++) {\n            totalBorrowRate = totalBorrowRate + parseInt(body.data.pools[pool].borrowRate);\n          }\n\n          if (body.data.pools.length == 0) {\n            setTotalLendRate(0);\n          } else {\n            setTotalLendRate((1 - s) * totalBorrowRate / body.data.pools.length);\n          }\n        }\n      }\n    } // console.log(totalBorrowRate,body.data.pools.length);\n\n  });\n} // getTotalBorrowedAmount(\"0x5a8043a7907c3a5c40ae52cff3abc026111ccd96\")\n// getBorrowRate(\"0x5a8043a7907c3a5c40ae52cff3abc026111ccd96\")","map":{"version":3,"sources":["/Users/ritikdutta/Desktop/Sublime/src/utility/dashboard.js"],"names":["request","Web3","web3","aggregatorV3InterfaceABI","getTotalBorrowedAmount","address","setTotalBorrowAmount","Data","JSON","stringify","query","options","error","response","Error","body","parse","console","log","interestAccrued","data","pools","length","forEach","pool","loanDurationTillNow","Date","now","parseInt","poolConstants","loanStartTime","repaymentVars","loanDurationCovered","interestPerSecond","borrowRate","poolToken","totalSupply","getBorrowRate","setTotalBorrowRate","totalBorrow","getNextRepaymentDeadline","setNextRepaymentDeadline","nextDeadline","next","nextInstalmentDeadline","deadlineformat","getMonth","getDate","getFullYear","join","getHours","getMinutes","getSeconds","getTotalLendAmount","setTotalLendAmount","totalLend","lendingDetailscopies","i","addr","borrowAsset","priceFeed","eth","Contract","roundData","methods","latestRoundData","call","answer","AmountLend","getLendRate","setTotalLendRate","s","totalBorrowRate"],"mappings":"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","sourcesContent":["\nimport request from 'request'\n// const Web3 = require(\"web3\");\nimport Web3 from \"web3\"\nconst web3 = new Web3(\"https://kovan.infura.io/v3/9dc997986f8840daa0e6ccb1d8d0d757\");\nconst aggregatorV3InterfaceABI = [{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\n\n\n// const request = require('request')\nexport function getTotalBorrowedAmount(address,setTotalBorrowAmount){\n\n\n    const Data = JSON.stringify({\n        query: `{\n            pools(where:{borrowerAddress:\"${address}\"}) {\n                poolConstants {\n                    borrowRate\n                    loanStartTime\n                } \n                poolToken {\n                    totalSupply\n                }\n                repaymentVars {\n                    loanDurationCovered\n                }\n            }\n          } \n          `\n    })\n    var options = {\n        'method': 'POST',\n        'url': 'https://api.thegraph.com/subgraphs/name/sublime-finance/sublime',\n        'headers': {'Content-Type': 'application/json'},\n        'body': Data\n    }       \n\n\n    request(options, async function (error, response) {\n        if (error) throw new Error(error); \n        var body = JSON.parse(response.body)\n        console.log(body)\n\n        let interestAccrued = 0;\n        if(body){\n            if(body.data){\n                if(body.data.pools && body.data.pools.length>0){\n                    body.data.pools.forEach(pool => { //Date.now() is not same as block.timestamp it should be quieried from blockchain but i wanted to keep it simple\n                        let loanDurationTillNow = (Date.now()- parseInt(pool.poolConstants.loanStartTime))*10**30;\n                        if (loanDurationTillNow > parseInt(pool.repaymentVars.loanDurationCovered)) {\n                            let interestPerSecond =(parseInt(pool.poolConstants.borrowRate)*parseInt(pool.poolToken.totalSupply))/(364 * 3600 * 24);\n                            interestAccrued += interestPerSecond*(loanDurationTillNow - parseInt(pool.repaymentVars.loanDurationCovered))/10**60;\n                        }\n                    });         \n\n                }\n                setTotalBorrowAmount(interestAccrued)\n            }\n            else  setTotalBorrowAmount(null)\n        } \n\n        \n    })\n\n}\n\nexport function getBorrowRate(address,setTotalBorrowRate){\n\n    const data = JSON.stringify({\n        query: `{\n            pools(where:{borrowerAddress:\"${address}\"}) {\n                poolConstants {\n                    borrowRate\n                } \n                poolToken {\n                    totalSupply\n                }\n            }\n          } \n          `\n    })\n    var options = {\n        'method': 'POST',\n        'url': 'https://api.thegraph.com/subgraphs/name/sublime-finance/sublime',\n        'headers': {'Content-Type': 'application/json'},\n        'body': data\n    }       \n\n    request(options, async function (error, response) {\n        if (error) throw new Error(error); \n        var body = JSON.parse(response.body)\n        console.log(body)\n\n        let totalBorrow = 0;\n        if(body){\n            if(body.data){\n                if(body.data.pools && body.data.pools.length>0){\n                    body.data.pools.forEach(pool => { \n                        totalBorrow += parseInt(pool.poolConstants.borrowRate)*parseInt(pool.poolToken.totalSupply)/10**18;\n                    });   \n                    \n\n                }\n                setTotalBorrowRate(totalBorrow);     \n            }\n            else setTotalBorrowRate(null);\n\n        }\n        \n    })\n\n}\nexport function getNextRepaymentDeadline(address,setNextRepaymentDeadline){\n\n    const data = JSON.stringify({\n        query: `{\n            pools(where:{borrowerAddress:\"${address}\"}) {\n                repaymentVars { \n                  nextInstalmentDeadline \n                }  \n            }\n          } \n          `\n    })\n    var options = {\n        'method': 'POST',\n        'url': 'https://api.thegraph.com/subgraphs/name/sublime-finance/sublime',\n        'headers': {'Content-Type': 'application/json'},\n        'body': data\n    }       \n\n    request(options, async function (error, response) {\n\n        if (error) throw new Error(error); \n        var body = JSON.parse(response.body)\n        let nextDeadline = null;\n        if(body){\n\n            if(body.data){\n                if(body.data.pools && body.data.pools.length>0){\n                    let next;\n                    body.data.pools.forEach(pool => { \n                        next = parseInt(pool.repaymentVars.nextInstalmentDeadline)\n                        if ( next > Date.now() &&  next < nextDeadline )\n                        nextDeadline = next ;\n                        \n                    });                   \n                }\n                if (nextDeadline != null){\n                    let deadlineformat = [nextDeadline.getMonth()+1,\n                        nextDeadline.getDate(),\n                        nextDeadline.getFullYear()].join('/')+' '+\n                       [nextDeadline.getHours(),\n                        nextDeadline.getMinutes(),\n                        nextDeadline.getSeconds()].join(':');\n                    setNextRepaymentDeadline(deadlineformat)\n        \n                }\n                else  setNextRepaymentDeadline(\"no upcoming deadline\")\n            }\n            else setNextRepaymentDeadline(null)\n\n        }\n\n    \n    })\n\n}\nexport function getTotalLendAmount(address,setTotalLendAmount){\n\n    \n    console.log(\"working\")\n    const data = JSON.stringify({\n        query: `{\n            lendingDetailscopies(where:{lender:\"${address}\",loanStatus:\"Active\"}){\n             id\n             AmountLend\n             pool{\n                borrowAsset\n              }\n           }\n           }            \n          `\n    })\n    var options = {\n        'method': 'POST',\n        'url': 'https://api.thegraph.com/subgraphs/name/sublime-finance/sublime',\n        'headers': {'Content-Type': 'application/json'},\n        'body': data\n    }       \n\n\n    request(options, async function (error, response) {\n\n        if (error) throw new Error(error); \n        var body = JSON.parse(response.body)\n        let totalLend = 0;\n        if(body){\n            if(body.data){\n                console.log(body.data)\n                if(body.data.lendingDetailscopies && body.data.lendingDetailscopies.length>0){\n                    for(var i=0;i<body.data.lendingDetailscopies.length;i++){\n                        let addr;\n                        if(body.data.lendingDetailscopies[i].pool.borrowAsset = \"0x0000000000000000000000000000000000000000\"){\n                            addr = \"0x9326BFA02ADD2366b30bacB125260Af641031331\"\n                        }\n                        const priceFeed = new web3.eth.Contract(aggregatorV3InterfaceABI, addr);\n                        let roundData =  ((await priceFeed.methods.latestRoundData().call()).answer)/10**8;\n                        \n                        totalLend += roundData*(parseInt(body.data.lendingDetailscopies[i].AmountLend)/10**18)\n                    }\n                    if(body.data.lendingDetailscopies.length == 0){\n                        setTotalLendAmount(0);\n                    }\n                    else{\n                        setTotalLendAmount(totalLend);\n                    }\n\n                }\n            }\n        }\n      \n        \n    })\n\n}\n\n\nexport function getLendRate(address,setTotalLendRate){\n\n    const data = JSON.stringify({\n        query: `{\n            pools(where:{borrower:\"${address}\",loanStatus:\"Active\"}) {\n                borrowRate\n            }\n          } \n          `\n    })\n    var options = {\n        'method': 'POST',\n        'url': 'https://api.thegraph.com/subgraphs/name/sublime-finance/sublime',\n        'headers': {'Content-Type': 'application/json'},\n        'body': data\n    }       \n\n    let s = 0\n\n    request(options, async function (error, response) {\n        \n        if (error) throw new Error(error); \n        var body = JSON.parse(response.body)\n        let totalBorrowRate = 0;\n        if(body){\n            if(body.data){\n                if(body.data.pools && body.data.pools.length>0){\n                    for(var pool=0;pool<body.data.pools.length;pool++){\n                        totalBorrowRate= totalBorrowRate + parseInt(body.data.pools[pool].borrowRate);\n                    }\n                    if(body.data.pools.length == 0){\n                        setTotalLendRate(0);\n                    }\n                    else{\n                        setTotalLendRate((1-s)*totalBorrowRate/body.data.pools.length);\n                    }\n\n                }\n            }\n        }\n        \n        \n        // console.log(totalBorrowRate,body.data.pools.length);\n\n    })\n\n}\n\n\n// getTotalBorrowedAmount(\"0x5a8043a7907c3a5c40ae52cff3abc026111ccd96\")\n// getBorrowRate(\"0x5a8043a7907c3a5c40ae52cff3abc026111ccd96\")\n"]},"metadata":{},"sourceType":"module"}