{"ast":null,"code":"import request from 'request';\nimport { getLoanStartDay } from './../../utility/time';\nimport { getSymbol } from './../../utility/symbol';\nimport { SUBGRAPH_API_URL } from '../../utility/constants';\nimport { ethers } from 'ethers';\nexport function borrowPools(address, setpoolBorrowData) {\n  let result;\n  const data = JSON.stringify({\n    query: `{\n            users(where:{id:\"${address}\"} ){\n              id\n              borrowingPools {\n                id\n                borrower{\n                    twitterDetails{\n                        twitterId\n                    }\n                }\n                borrowRate\n                borrowAmountRequested\n                loanStatus\n                published\n                loanStartTime\n                lentAmount\n                borrowAsset\n              }\n            }\n        }`\n  });\n  var options = {\n    method: 'POST',\n    url: SUBGRAPH_API_URL,\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: data\n  };\n  result = request(options, async function (error, response) {\n    if (error) {\n      setpoolBorrowData([]);\n      throw new Error(error);\n    }\n\n    var body = JSON.parse(response.body);\n    var pools = [];\n\n    if (body) {\n      if (body.data) {\n        if (body.data.users && body.data.users.length > 0) {\n          if (body.data.users[0].borrowingPools) {\n            let poolData = body.data.users[0].borrowingPools;\n\n            for (var i = 0; i < poolData.length; i++) {\n              let name = 'user name';\n\n              try {\n                name = ethers.utils.parseBytes32String(poolData[i].borrower.twitterDetails.twitterId);\n              } catch (error) {}\n\n              var pool = {\n                id: i + 1,\n                avatar: '',\n                name,\n                username: `@${name}`,\n                pool_type: 'Open Borrow',\n                pool_status: poolData[i].loanStatus,\n                created_on: '18th Jan 2021',\n                borrow_rate: poolData[i].borrowRate / 10 ** 8 + '%',\n                borrowed_amount: poolData[i].borrowAmountRequested / 10 ** 18 + ' ' + getSymbol(poolData[i].borrowAsset),\n                progress_and_payment_txt: 'Collection Progress',\n                progress_and_payment: Math.floor(poolData[i].lentAmount * 100 / poolData[i].borrowAmountRequested) + '%',\n                next_payment: '200 DOT',\n                ends_date: getLoanStartDay(poolData[i].loanStartTime),\n                btn_1: 'Provide collateral',\n                btn_2: 'View More',\n                address: poolData[i].id\n              };\n              pools.push(pool);\n            }\n          }\n        }\n      }\n    }\n\n    setpoolBorrowData(pools);\n  });\n}","map":{"version":3,"sources":["/Users/ritikdutta/Desktop/SUBLIME/sublime-frontend/src/query/pool/borrowingPools.js"],"names":["request","getLoanStartDay","getSymbol","SUBGRAPH_API_URL","ethers","borrowPools","address","setpoolBorrowData","result","data","JSON","stringify","query","options","method","url","headers","body","error","response","Error","parse","pools","users","length","borrowingPools","poolData","i","name","utils","parseBytes32String","borrower","twitterDetails","twitterId","pool","id","avatar","username","pool_type","pool_status","loanStatus","created_on","borrow_rate","borrowRate","borrowed_amount","borrowAmountRequested","borrowAsset","progress_and_payment_txt","progress_and_payment","Math","floor","lentAmount","next_payment","ends_date","loanStartTime","btn_1","btn_2","push"],"mappings":"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","sourcesContent":["import request from 'request';\n\nimport { getLoanStartDay } from './../../utility/time';\nimport { getSymbol } from './../../utility/symbol';\nimport { SUBGRAPH_API_URL } from '../../utility/constants';\nimport { ethers } from 'ethers';\n\nexport function borrowPools(address, setpoolBorrowData) {\n  let result;\n  const data = JSON.stringify({\n    query: `{\n            users(where:{id:\"${address}\"} ){\n              id\n              borrowingPools {\n                id\n                borrower{\n                    twitterDetails{\n                        twitterId\n                    }\n                }\n                borrowRate\n                borrowAmountRequested\n                loanStatus\n                published\n                loanStartTime\n                lentAmount\n                borrowAsset\n              }\n            }\n        }`,\n  });\n\n  var options = {\n    method: 'POST',\n    url: SUBGRAPH_API_URL,\n    headers: { 'Content-Type': 'application/json' },\n    body: data,\n  };\n\n  result = request(options, async function (error, response) {\n    if (error) {\n      setpoolBorrowData([]);\n      throw new Error(error);\n    }\n    var body = JSON.parse(response.body);\n    var pools = [];\n    if (body) {\n      if (body.data) {\n        if (body.data.users && body.data.users.length > 0) {\n          if (body.data.users[0].borrowingPools) {\n            let poolData = body.data.users[0].borrowingPools;\n            for (var i = 0; i < poolData.length; i++) {\n              let name = 'user name';\n              try {\n                name = ethers.utils.parseBytes32String(poolData[i].borrower.twitterDetails.twitterId);\n              } catch (error) {}\n              var pool = {\n                id: i + 1,\n                avatar: '',\n                name,\n                username: `@${name}`,\n                pool_type: 'Open Borrow',\n                pool_status: poolData[i].loanStatus,\n                created_on: '18th Jan 2021',\n                borrow_rate: poolData[i].borrowRate / 10 ** 8 + '%',\n                borrowed_amount: poolData[i].borrowAmountRequested / 10 ** 18 + ' ' + getSymbol(poolData[i].borrowAsset),\n                progress_and_payment_txt: 'Collection Progress',\n                progress_and_payment: Math.floor((poolData[i].lentAmount * 100) / poolData[i].borrowAmountRequested) + '%',\n                next_payment: '200 DOT',\n                ends_date: getLoanStartDay(poolData[i].loanStartTime),\n                btn_1: 'Provide collateral',\n                btn_2: 'View More',\n                address: poolData[i].id,\n              };\n              pools.push(pool);\n            }\n          }\n        }\n      }\n    }\n    setpoolBorrowData(pools);\n  });\n}\n"]},"metadata":{},"sourceType":"module"}