{"ast":null,"code":"import request from 'request'; // const Web3 = require(\"web3\");\n\nimport Web3 from 'web3';\nimport priceOracle from '../../utility/priceOracleAddress.json';\nconst web3 = new Web3('https://kovan.infura.io/v3/9dc997986f8840daa0e6ccb1d8d0d757');\nconst aggregatorV3InterfaceABI = [{\n  inputs: [],\n  name: 'decimals',\n  outputs: [{\n    internalType: 'uint8',\n    name: '',\n    type: 'uint8'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [],\n  name: 'description',\n  outputs: [{\n    internalType: 'string',\n    name: '',\n    type: 'string'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [{\n    internalType: 'uint80',\n    name: '_roundId',\n    type: 'uint80'\n  }],\n  name: 'getRoundData',\n  outputs: [{\n    internalType: 'uint80',\n    name: 'roundId',\n    type: 'uint80'\n  }, {\n    internalType: 'int256',\n    name: 'answer',\n    type: 'int256'\n  }, {\n    internalType: 'uint256',\n    name: 'startedAt',\n    type: 'uint256'\n  }, {\n    internalType: 'uint256',\n    name: 'updatedAt',\n    type: 'uint256'\n  }, {\n    internalType: 'uint80',\n    name: 'answeredInRound',\n    type: 'uint80'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [],\n  name: 'latestRoundData',\n  outputs: [{\n    internalType: 'uint80',\n    name: 'roundId',\n    type: 'uint80'\n  }, {\n    internalType: 'int256',\n    name: 'answer',\n    type: 'int256'\n  }, {\n    internalType: 'uint256',\n    name: 'startedAt',\n    type: 'uint256'\n  }, {\n    internalType: 'uint256',\n    name: 'updatedAt',\n    type: 'uint256'\n  }, {\n    internalType: 'uint80',\n    name: 'answeredInRound',\n    type: 'uint80'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  inputs: [],\n  name: 'version',\n  outputs: [{\n    internalType: 'uint256',\n    name: '',\n    type: 'uint256'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}];\nexport async function getRequiredCollateralAmount(borrowAssest, collateralAssest, setRequiredCollateral, borrowTokens, collateralRatio) {\n  if (borrowAssest == collateralAssest) {\n    setRequiredCollateral(borrowTokens * collateralRatio / 100);\n    return;\n  } // await priceOracle.connect(admin).initialize(admin.address);\n  // await priceOracle.connect(admin).setfeedAddress(Contracts.LINK, ChainLinkAggregators[\"LINK/USD\"]);\n  // await priceOracle.connect(admin).setfeedAddress(Contracts.DAI, ChainLinkAggregators[\"DAI/USD\"]);\n\n\n  let addr = priceOracle.priceOracle.address[borrowAssest + '/' + collateralAssest]; // console.log(addr)\n\n  const priceFeed = new web3.eth.Contract(aggregatorV3InterfaceABI, addr);\n  let roundData = (await priceFeed.methods.latestRoundData().call()).answer / 10 ** 18; // console.log(roundData);\n\n  let required = borrowTokens * (collateralRatio / 100) * roundData; // console.log(required)\n\n  setRequiredCollateral(required);\n  return;\n}","map":{"version":3,"sources":["/Users/ritikdutta/Desktop/sublime-frontend/src/query/pool/requiredCollateral.js"],"names":["request","Web3","priceOracle","web3","aggregatorV3InterfaceABI","inputs","name","outputs","internalType","type","stateMutability","getRequiredCollateralAmount","borrowAssest","collateralAssest","setRequiredCollateral","borrowTokens","collateralRatio","addr","address","priceFeed","eth","Contract","roundData","methods","latestRoundData","call","answer","required"],"mappings":"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","sourcesContent":["import request from 'request';\n// const Web3 = require(\"web3\");\nimport Web3 from 'web3';\nimport priceOracle from '../../utility/priceOracleAddress.json';\n\nconst web3 = new Web3('https://kovan.infura.io/v3/9dc997986f8840daa0e6ccb1d8d0d757');\nconst aggregatorV3InterfaceABI = [\n  { inputs: [], name: 'decimals', outputs: [{ internalType: 'uint8', name: '', type: 'uint8' }], stateMutability: 'view', type: 'function' },\n  { inputs: [], name: 'description', outputs: [{ internalType: 'string', name: '', type: 'string' }], stateMutability: 'view', type: 'function' },\n  {\n    inputs: [{ internalType: 'uint80', name: '_roundId', type: 'uint80' }],\n    name: 'getRoundData',\n    outputs: [\n      { internalType: 'uint80', name: 'roundId', type: 'uint80' },\n      { internalType: 'int256', name: 'answer', type: 'int256' },\n      { internalType: 'uint256', name: 'startedAt', type: 'uint256' },\n      { internalType: 'uint256', name: 'updatedAt', type: 'uint256' },\n      { internalType: 'uint80', name: 'answeredInRound', type: 'uint80' },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'latestRoundData',\n    outputs: [\n      { internalType: 'uint80', name: 'roundId', type: 'uint80' },\n      { internalType: 'int256', name: 'answer', type: 'int256' },\n      { internalType: 'uint256', name: 'startedAt', type: 'uint256' },\n      { internalType: 'uint256', name: 'updatedAt', type: 'uint256' },\n      { internalType: 'uint80', name: 'answeredInRound', type: 'uint80' },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  { inputs: [], name: 'version', outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }], stateMutability: 'view', type: 'function' },\n];\n\nexport async function getRequiredCollateralAmount(borrowAssest, collateralAssest, setRequiredCollateral, borrowTokens, collateralRatio) {\n  if (borrowAssest == collateralAssest) {\n    setRequiredCollateral((borrowTokens * collateralRatio) / 100);\n    return;\n  }\n\n  // await priceOracle.connect(admin).initialize(admin.address);\n  // await priceOracle.connect(admin).setfeedAddress(Contracts.LINK, ChainLinkAggregators[\"LINK/USD\"]);\n  // await priceOracle.connect(admin).setfeedAddress(Contracts.DAI, ChainLinkAggregators[\"DAI/USD\"]);\n\n  let addr = priceOracle.priceOracle.address[borrowAssest + '/' + collateralAssest];\n\n  // console.log(addr)\n  const priceFeed = new web3.eth.Contract(aggregatorV3InterfaceABI, addr);\n  let roundData = (await priceFeed.methods.latestRoundData().call()).answer / 10 ** 18;\n  // console.log(roundData);\n  let required = borrowTokens * (collateralRatio / 100) * roundData;\n  // console.log(required)\n  setRequiredCollateral(required);\n  return;\n}\n"]},"metadata":{},"sourceType":"module"}