{"ast":null,"code":"import request from 'request';\nimport { getLoanStartDay } from './../../utility/time';\nimport { getSymbol } from './../../utility/symbol';\nimport { ethers } from 'ethers';\nimport { SUBGRAPH_API_URL } from '../../utility/constants';\nexport function lendPools(address, setpoollendData) {\n  let result;\n  const data = JSON.stringify({\n    query: `{\n            pools{\n              id\n              lenders{\n                id\n              }\n              lentAmount\n              borrowRate\n              borrowAmountRequested\n              loanStatus\n              published\n              loanStartTime\n              loanDuration\n              idealCollateralRatio\n              borrowAsset\n              borrower{\n                id \n                twitterDetails{\n                    twitterId\n                }\n            }\n            }\n          }          \n          `\n  });\n  var options = {\n    'method': 'POST',\n    'url': SUBGRAPH_API_URL,\n    'headers': {\n      'Content-Type': 'application/json'\n    },\n    'body': data\n  };\n  result = request(options, async function (error, response) {\n    if (error) throw new Error(error);\n    var body = JSON.parse(response.body);\n    var pools = [];\n\n    if (body) {\n      if (body.data) {\n        if (body.data.pools && body.data.pools.length > 0) {\n          let poolData = body.data.pools;\n\n          for (var i = 0; i < poolData.length; i++) {\n            let name = 'user name';\n\n            try {\n              name = ethers.utils.parseBytes32String(poolData[i].borrower.twitterDetails.twitterId);\n            } catch (error) {}\n\n            if (poolData[i].lenders.includes(address)) {\n              var pool = {\n                id: poolData[i].id,\n                name: name,\n                username: `@${name}`,\n                pool_type: 'Open Borrow',\n                pool_status: poolData[i].loanStatus,\n                participating: true,\n                borrow_rate: poolData[i].borrowRate / 10 ** 8 + '%',\n                borrowing: poolData[i].borrowAmountRequested / 10 ** 18 + ' ' + getSymbol(poolData[i].borrowAsset),\n                locked_collateral: poolData[i].idealCollateralRatio / 10 ** 8 + '%',\n                collection_progress: Math.floor(poolData[i].lentAmount * 100 / poolData[i].borrowAmountRequested) + '%',\n                lent: '700 DOT at 10%',\n                address: poolData[i].id,\n                loanStartTime: poolData[i].loanStartTime,\n                loanDuration: poolData[i].loanDuration\n              };\n            } else {\n              var pool = {\n                id: poolData[i].id,\n                name: name,\n                username: `@${name}`,\n                pool_type: 'Open Borrow',\n                pool_status: poolData[i].loanStatus,\n                borrow_rate: poolData[i].borrowRate / 10 ** 8 + '%',\n                participating: false,\n                borrowing: poolData[i].borrowAmountRequested / 10 ** 18 + ' ' + getSymbol(poolData[i].borrowAsset),\n                locked_collateral: poolData[i].idealCollateralRatio / 10 ** 8 + '%',\n                collection_progress: Math.floor(poolData[i].lentAmount * 100 / poolData[i].borrowAmountRequested) + '%',\n                address: poolData[i].id,\n                loanStartTime: poolData[i].loanStartTime,\n                loanDuration: poolData[i].loanDuration\n              };\n            }\n\n            pools.push(pool);\n          }\n        }\n      }\n    }\n\n    setpoollendData(pools);\n  });\n}\n;","map":{"version":3,"sources":["/Users/ritikdutta/Desktop/sublime-frontend/src/query/pool/lendPool.js"],"names":["request","getLoanStartDay","getSymbol","ethers","SUBGRAPH_API_URL","lendPools","address","setpoollendData","result","data","JSON","stringify","query","options","error","response","Error","body","parse","pools","length","poolData","i","name","utils","parseBytes32String","borrower","twitterDetails","twitterId","lenders","includes","pool","id","username","pool_type","pool_status","loanStatus","participating","borrow_rate","borrowRate","borrowing","borrowAmountRequested","borrowAsset","locked_collateral","idealCollateralRatio","collection_progress","Math","floor","lentAmount","lent","loanStartTime","loanDuration","push"],"mappings":"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","sourcesContent":["import request from 'request'\n\nimport {getLoanStartDay} from './../../utility/time'\nimport {getSymbol} from './../../utility/symbol'\nimport {ethers} from 'ethers'\nimport {SUBGRAPH_API_URL} from '../../utility/constants'\n\nexport function lendPools(address,setpoollendData){\n\n    let result;\n\n    const data = JSON.stringify({\n        query: `{\n            pools{\n              id\n              lenders{\n                id\n              }\n              lentAmount\n              borrowRate\n              borrowAmountRequested\n              loanStatus\n              published\n              loanStartTime\n              loanDuration\n              idealCollateralRatio\n              borrowAsset\n              borrower{\n                id \n                twitterDetails{\n                    twitterId\n                }\n            }\n            }\n          }          \n          `\n    })\n\n    var options = {\n        'method': 'POST',\n        'url': SUBGRAPH_API_URL,\n        'headers': {'Content-Type': 'application/json'},\n        'body': data\n    }       \n\n\n    result = request(options, async function (error, response) {\n\n        if (error) throw new Error(error); \n        var body = JSON.parse(response.body)\n        var pools = []\n        if(body){\n            if(body.data){\n                if(body.data.pools && body.data.pools.length>0){\n                    let poolData = body.data.pools\n                    for(var i =0;i<poolData.length;i++){\n                        let name = 'user name'\n                        try {\n                            name = ethers.utils.parseBytes32String(poolData[i].borrower.twitterDetails.twitterId)\n                        } catch (error) {}\n                            if(poolData[i].lenders.includes(address)){\n                                var pool = {\n                                    id: poolData[i].id,\n                                    name: name,\n                                    username: `@${name}`,\n                                    pool_type: 'Open Borrow',\n                                    pool_status: poolData[i].loanStatus,\n                                    participating: true,\n                                    borrow_rate: (poolData[i].borrowRate)/10**8+'%',\n                                    borrowing: (poolData[i].borrowAmountRequested)/10**18+' '+ getSymbol(poolData[i].borrowAsset),\n                                    locked_collateral: (poolData[i].idealCollateralRatio)/10**8+'%',\n                                    collection_progress: Math.floor((poolData[i].lentAmount*100/poolData[i].borrowAmountRequested))+'%',\n                                    lent: '700 DOT at 10%',\n                                    address:poolData[i].id,\n                                    loanStartTime: poolData[i].loanStartTime,\n                                    loanDuration: poolData[i].loanDuration\n                                }\n                            } else {\n                                var pool = {\n                                    id: poolData[i].id,\n                                    name: name,\n                                    username: `@${name}`,\n                                    pool_type: 'Open Borrow',\n                                    pool_status: poolData[i].loanStatus,\n                                    borrow_rate: (poolData[i].borrowRate)/10**8 +'%',\n                                    participating: false,\n                                    borrowing: (poolData[i].borrowAmountRequested)/10**18+' '+ getSymbol(poolData[i].borrowAsset),\n                                    locked_collateral: (poolData[i].idealCollateralRatio)/10**8+'%',\n                                    collection_progress: Math.floor(poolData[i].lentAmount*100/poolData[i].borrowAmountRequested)+'%',\n                                    address:poolData[i].id,\n                                    loanStartTime: poolData[i].loanStartTime,\n                                    loanDuration: poolData[i].loanDuration\n                                }\n                            }\n                            pools.push(pool)\n                    }\n                    \n                }\n            }\n            \n        }\n        setpoollendData(pools)\n    })\n    \n};"]},"metadata":{},"sourceType":"module"}