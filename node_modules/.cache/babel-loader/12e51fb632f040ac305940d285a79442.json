{"ast":null,"code":"import { ethers } from \"ethers\";\nimport Web3 from \"web3\";\n\nconst poolContract = require(\"../../abi/pool.json\");\n\nconst ecr20abi = require(\"../../abi/erc20.json\");\n\nconst web3 = new Web3(Web3.givenProvider);\n\nconst onMarginCallSuccess = (hash, callback) => {\n  const onCreateInterval = setInterval(async () => {\n    web3.eth.getTransactionReceipt(hash).then(txReceipt => {\n      if ((txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.status) === true) {\n        clearInterval(onCreateInterval);\n        console.log('true TXRECEIPT', txReceipt);\n        callback({\n          success: true\n        });\n      } else if ((txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.status) === false) {\n        console.log('false TXRECEIPT', txReceipt);\n      }\n    });\n  }, 5000);\n};\n\nexport async function addCollateralInMarginCall(amount, poolAddress, tokenAddress, transferSavingAccount, callback) {\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  let lender = await signer.getAddress();\n  let newAmount = ethers.utils.parseUnits(amount.toString()).toString();\n  var contract = new web3.eth.Contract(poolContract, poolAddress);\n  var erc20contract = new web3.eth.Contract(ecr20abi, tokenAddress);\n  const isAllowed = await erc20contract.methods.allowance(lender, poolAddress).call();\n\n  try {\n    if (isAllowed && Number(isAllowed) >= Number(newAmount)) {\n      await contract.methods.addCollateralInMarginCall(lender, newAmount, transferSavingAccount).send({\n        from: lender\n      }, function async(err, res) {\n        if (err) {\n          console.log('addCollateralInMarginCall ERROR', err);\n          callback({\n            error: true,\n            message: err.message\n          });\n          return;\n        }\n\n        if (res) {\n          console.log('addCollateralInMarginCall HASH', res);\n          onMarginCallSuccess(res, callback);\n        }\n      });\n    } else {\n      console.log('isAllowed false');\n      await erc20contract.methods.approve(poolAddress, newAmount).send({\n        from: lender\n      }, async (error, receipt) => {\n        if (error) {\n          console.log('APPROVE ERROR', error);\n          callback({\n            error: true,\n            message: error.message\n          });\n          return;\n        }\n\n        const interval = setInterval(async () => {\n          web3.eth.getTransactionReceipt(receipt).then(async txReceipt => {\n            if ((txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.status) === true) {\n              clearInterval(interval);\n              await contract.methods.addCollateralInMarginCall(lender, newAmount, transferSavingAccount).send({\n                from: lender\n              }, function async(err, res) {\n                if (err) {\n                  console.log('addCollateralInMarginCall ERROR', err);\n                  callback({\n                    error: true,\n                    message: err.message\n                  });\n                  return;\n                }\n\n                if (res) {\n                  console.log('addCollateralInMarginCall HASH', res);\n                  onMarginCallSuccess(res, callback);\n                }\n              });\n            } else if ((txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.status) === false) {\n              console.log('approve false TXRECEIPT', txReceipt);\n            }\n          });\n        }, 5000);\n      });\n    }\n  } catch (error) {\n    console.log('ERROR');\n\n    if (error.message.includes('User denied transaction')) {\n      callback({\n        error: true,\n        message: error.message\n      });\n    } else {\n      callback({\n        error: true,\n        message: 'Invalid values entered.'\n      });\n    }\n  }\n}","map":{"version":3,"sources":["/Users/ritikdutta/Desktop/sublime-frontend/src/contractTranscations/pool/addCollateralInMarginCall.js"],"names":["ethers","Web3","poolContract","require","ecr20abi","web3","givenProvider","onMarginCallSuccess","hash","callback","onCreateInterval","setInterval","eth","getTransactionReceipt","then","txReceipt","status","clearInterval","console","log","success","addCollateralInMarginCall","amount","poolAddress","tokenAddress","transferSavingAccount","provider","providers","Web3Provider","window","ethereum","signer","getSigner","lender","getAddress","newAmount","utils","parseUnits","toString","contract","Contract","erc20contract","isAllowed","methods","allowance","call","Number","send","from","async","err","res","error","message","approve","receipt","interval","includes"],"mappings":"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","sourcesContent":["import { ethers } from \"ethers\";\nimport Web3 from \"web3\"\n\nconst poolContract = require(\"../../abi/pool.json\");\nconst ecr20abi = require(\"../../abi/erc20.json\");\nconst web3 = new Web3(Web3.givenProvider);\n\nconst onMarginCallSuccess = (hash, callback) => {\n  const onCreateInterval = setInterval(async () => {\n    web3.eth.getTransactionReceipt(hash).then((txReceipt) => {\n      if (txReceipt?.status === true) {\n        clearInterval(onCreateInterval);\n\n        console.log('true TXRECEIPT', txReceipt);\n        callback({ success: true });\n      } else if (txReceipt?.status === false) {\n        console.log('false TXRECEIPT', txReceipt);\n      }\n    });\n  }, 5000);\n}\n\nexport async function addCollateralInMarginCall(amount, poolAddress, tokenAddress, transferSavingAccount, callback){\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  let lender = await signer.getAddress();\n\n  let newAmount = (ethers.utils.parseUnits(amount.toString())).toString()\n\n  var contract = new web3.eth.Contract(poolContract, poolAddress);\n  var erc20contract = new web3.eth.Contract(ecr20abi, tokenAddress);\n\n  const isAllowed = await erc20contract.methods.allowance(lender, poolAddress).call()\n\n  try {\n    if (isAllowed && Number(isAllowed) >= Number(newAmount)) {\n      await contract.methods.addCollateralInMarginCall(lender, newAmount, transferSavingAccount).send({ from: lender }, function async(err, res) {\n        if (err) {\n          console.log('addCollateralInMarginCall ERROR', err);\n          callback({ error: true, message: err.message });\n          return\n        }\n        if (res) {\n          console.log('addCollateralInMarginCall HASH', res);\n          onMarginCallSuccess(res, callback)\n        }\n      })\n\n    } else {\n      console.log('isAllowed false');\n      await erc20contract.methods.approve(\n        poolAddress,\n        newAmount\n      ).send({ from: lender }, async (error, receipt) => {\n        if (error) {\n          console.log('APPROVE ERROR', error);\n          callback({ error: true, message: error.message });\n          return\n        }\n  \n        const interval = setInterval(async () => {\n          web3.eth.getTransactionReceipt(receipt).then(async (txReceipt) => {\n            if (txReceipt?.status === true) {\n              clearInterval(interval);\n      \n              await contract.methods.addCollateralInMarginCall(lender, newAmount, transferSavingAccount).send({ from: lender }, function async(err, res) {\n                if (err) {\n                  console.log('addCollateralInMarginCall ERROR', err);\n                  callback({ error: true, message: err.message });\n                  return\n                }\n                if (res) {\n                  console.log('addCollateralInMarginCall HASH', res);\n                  onMarginCallSuccess(res, callback)\n                }\n              })\n\n            } else if (txReceipt?.status === false) {\n              console.log('approve false TXRECEIPT', txReceipt);\n            }\n          });\n        }, 5000)\n      });\n    }\n  } catch (error) {\n    console.log('ERROR');\n    if (error.message.includes('User denied transaction')) {\n      callback({ error: true, message: error.message });\n    } else {\n      callback({ error: true, message: 'Invalid values entered.' });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}