{"ast":null,"code":"import { BigNumber, ethers } from 'ethers';\nimport { getConfiguredAddress } from '../../utility/functions';\nimport Web3 from 'web3';\nimport { getGlobalPoolDetail } from '../../query/pool/globalPoolDetails';\n\nconst poolContract = require('../../abi/poolFactory.json');\n\nconst ecr20abi = require('../../abi/erc20.json');\n\nconst poolContractMeta = require('../../abi/artifacts/contracts/Pool/Pool.sol/Pool.json');\n\nconst proxyMeta = require('../../abi/artifacts/contracts/Proxy.sol/SublimeProxy.json');\n\nconst _interface = new ethers.utils.Interface(poolContractMeta.abi);\n\nconst initializeFragement = _interface.getFunction('initialize');\n\nconst web3 = new Web3(Web3.givenProvider);\n\nconst getSalt = (address, salt) => {\n  const res = ethers.utils.solidityKeccak256(['bytes32', 'address'], [salt, address]);\n  return res;\n};\n\nconst getInitCodehash = (proxyBytecode, poolImplAddr, poolData, admin) => {\n  const initialize = ethers.utils.defaultAbiCoder.encode(['address', 'address', 'bytes'], [poolImplAddr, admin, poolData]);\n  const encodedData = proxyBytecode + initialize.replace('0x', '');\n  return ethers.utils.keccak256(encodedData);\n};\n\nconst getPoolAddress = (borrower, token1, token2, strategy, poolFactory, salt, poolLogic, transferFromSavingsAccount, collateralRatio, borrowRate, repaymentPeriodInSeconds, noOfRepaymentIntervals, initialCollateralDeposit, poolSize, minborrowAmount, matchCollateralRatioInterval, collectionPeriod) => {\n  const poolData = _interface.encodeFunctionData(initializeFragement, [poolSize, // _poolSize,\n  minborrowAmount, // _minborrowAmount,\n  borrower, token1, token2, collateralRatio, // _collateralRatio\n  borrowRate, // _borrowRate\n  repaymentPeriodInSeconds, // _repaymentInterval\n  noOfRepaymentIntervals, // _noOfRepaymentIntervals\n  strategy, initialCollateralDeposit, // _collateralAmount\n  transferFromSavingsAccount, matchCollateralRatioInterval, // _matchCollateralRatioInterval\n  collectionPeriod // _collectionPeriod\n  ]);\n\n  console.log('poolData', poolData, poolFactory, getSalt(borrower, salt));\n  const poolAddress = ethers.utils.getCreate2Address(poolFactory, getSalt(borrower, salt), getInitCodehash(proxyMeta.bytecode, poolLogic, poolData, '0x0000000000000000000000000000000000000001'));\n  return poolAddress;\n};\n\nconst onCreatePool = (hash, callback) => {\n  const onCreateInterval = setInterval(async () => {\n    web3.eth.getTransactionReceipt(hash).then(txReceipt => {\n      if ((txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.status) === true) {\n        clearInterval(onCreateInterval);\n        console.log('true TXRECEIPT', txReceipt);\n        callback({\n          success: true\n        });\n      } else if ((txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.status) === false) {\n        console.log('false TXRECEIPT', txReceipt);\n      }\n    });\n  }, 5000);\n};\n\nexport async function createOpenBorrowPool(depositData, callback) {\n  const onSuccess = async poolDetails => {\n    try {\n      const {\n        collectionPeriod,\n        matchCollateralRatioInterval\n      } = poolDetails;\n      const timestamp = new Date().getTime();\n      const address = await window.sessionStorage.getItem('address');\n      const provider = new ethers.providers.Web3Provider(window.ethereum); // const chainId = provider.provider[\"networkVersion\"]\n\n      const poolFactory = getConfiguredAddress('poolFactory');\n      const poolLogic = getConfiguredAddress('pool');\n      const signer = provider.getSigner();\n      var contract = new web3.eth.Contract(poolContract, poolFactory);\n      var erc20contract = new web3.eth.Contract(ecr20abi, depositData.CollateralToken);\n      let numberOfSecondsInWeek = 60 * 60 * 24 * 7;\n      let repaymentPeriodInSeconds = (parseInt(depositData.repaymentPeriod.split(' ')[0], 10) * numberOfSecondsInWeek).toString();\n      let balance = await signer.getBalance(); // contract = contract.connect(signer);\n\n      let borrower = await signer.getAddress();\n      let borrowAmount = depositData.borrowAmount.toString().toString();\n      var minborrowAmount = 60 / 100 * borrowAmount;\n      let collateral = Number(depositData.requiredCollateral).toFixed(18);\n      let initialCollateralDeposit = ethers.utils.parseUnits(collateral.toString()).toString();\n      const loanPeriodInSeconds = (parseInt(depositData.loanPeriod.split(' ')[0], 10) * numberOfSecondsInWeek).toString();\n      const noOfRepaymentIntervals = Math.ceil(loanPeriodInSeconds / repaymentPeriodInSeconds).toString();\n      const collateralRatio = depositData.collaterizationRatio * 10 ** 8;\n      const borrowRate = (depositData.interestRate * 10 ** 8).toString();\n      const salt = ethers.utils.formatBytes32String(timestamp.toString());\n      const poolAddress = await getPoolAddress(address, depositData.borrowToken, depositData.CollateralToken, '0x0000000000000000000000000000000000000000', poolFactory, salt, poolLogic, false, collateralRatio, borrowRate, repaymentPeriodInSeconds, noOfRepaymentIntervals, initialCollateralDeposit, borrowAmount, minborrowAmount, matchCollateralRatioInterval, collectionPeriod);\n      localStorage.setItem('poolAddress', poolAddress);\n      console.log('borrowToken', depositData.borrowToken);\n      console.log('CollateralToken', depositData.CollateralToken);\n      console.log('poolAddress', poolAddress);\n      console.log('salt in createPool', salt);\n      const amount = BigNumber.from(initialCollateralDeposit); // static 185014322501600\n\n      await erc20contract.methods.approve(poolAddress, amount).send({\n        from: address\n      }, async (error, receipt) => {\n        if (error) {\n          callback({\n            error: true,\n            message: error.message\n          });\n          return;\n        }\n\n        const interval = setInterval(async () => {\n          web3.eth.getTransactionReceipt(receipt).then(async txReceipt => {\n            if ((txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.status) === true) {\n              clearInterval(interval);\n              const isAllowed = await erc20contract.methods.allowance(address, poolAddress).call();\n              console.log('isAllowed', isAllowed);\n              await contract.methods.createPool(borrowAmount, // pool size\n              minborrowAmount, depositData.borrowToken, depositData.CollateralToken, collateralRatio, borrowRate, repaymentPeriodInSeconds, noOfRepaymentIntervals, '0x0000000000000000000000000000000000000000', initialCollateralDeposit, false, salt // borrowerTransactionConfig\n              ).send({\n                from: address\n              }, function async(err, res) {\n                if (err) {\n                  callback({\n                    error: true,\n                    message: err.message\n                  });\n                  return;\n                }\n\n                if (res) {\n                  console.log('HASH', res);\n                  onCreatePool(res, callback);\n                }\n              });\n            } else if ((txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.status) === false) {\n              console.log('approve false TXRECEIPT', txReceipt);\n            }\n          });\n        }, 5000);\n      });\n    } catch (error) {\n      if (error.message.includes('User denied transaction')) {\n        callback({\n          error: true,\n          message: error.message\n        });\n      } else {\n        callback({\n          error: true,\n          message: 'Invalid values entered.'\n        });\n      }\n    }\n  };\n\n  await getGlobalPoolDetail(onSuccess, callback);\n}","map":{"version":3,"sources":["/Users/ritikdutta/Desktop/sublime-frontend/src/contractTranscations/pool/createOpenBorrowPool.js"],"names":["BigNumber","ethers","getConfiguredAddress","Web3","getGlobalPoolDetail","poolContract","require","ecr20abi","poolContractMeta","proxyMeta","_interface","utils","Interface","abi","initializeFragement","getFunction","web3","givenProvider","getSalt","address","salt","res","solidityKeccak256","getInitCodehash","proxyBytecode","poolImplAddr","poolData","admin","initialize","defaultAbiCoder","encode","encodedData","replace","keccak256","getPoolAddress","borrower","token1","token2","strategy","poolFactory","poolLogic","transferFromSavingsAccount","collateralRatio","borrowRate","repaymentPeriodInSeconds","noOfRepaymentIntervals","initialCollateralDeposit","poolSize","minborrowAmount","matchCollateralRatioInterval","collectionPeriod","encodeFunctionData","console","log","poolAddress","getCreate2Address","bytecode","onCreatePool","hash","callback","onCreateInterval","setInterval","eth","getTransactionReceipt","then","txReceipt","status","clearInterval","success","createOpenBorrowPool","depositData","onSuccess","poolDetails","timestamp","Date","getTime","window","sessionStorage","getItem","provider","providers","Web3Provider","ethereum","signer","getSigner","contract","Contract","erc20contract","CollateralToken","numberOfSecondsInWeek","parseInt","repaymentPeriod","split","toString","balance","getBalance","getAddress","borrowAmount","collateral","Number","requiredCollateral","toFixed","parseUnits","loanPeriodInSeconds","loanPeriod","Math","ceil","collaterizationRatio","interestRate","formatBytes32String","borrowToken","localStorage","setItem","amount","from","methods","approve","send","error","receipt","message","interval","isAllowed","allowance","call","createPool","async","err","includes"],"mappings":"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","sourcesContent":["import { BigNumber, ethers } from 'ethers';\nimport { getConfiguredAddress } from '../../utility/functions';\nimport Web3 from 'web3';\nimport { getGlobalPoolDetail } from '../../query/pool/globalPoolDetails';\n\nconst poolContract = require('../../abi/poolFactory.json');\nconst ecr20abi = require('../../abi/erc20.json');\nconst poolContractMeta = require('../../abi/artifacts/contracts/Pool/Pool.sol/Pool.json');\nconst proxyMeta = require('../../abi/artifacts/contracts/Proxy.sol/SublimeProxy.json');\n\nconst _interface = new ethers.utils.Interface(poolContractMeta.abi);\nconst initializeFragement = _interface.getFunction('initialize');\nconst web3 = new Web3(Web3.givenProvider);\n\nconst getSalt = (address, salt) => {\n  const res = ethers.utils.solidityKeccak256(['bytes32', 'address'], [salt, address]);\n  return res;\n};\n\nconst getInitCodehash = (proxyBytecode, poolImplAddr, poolData, admin) => {\n  const initialize = ethers.utils.defaultAbiCoder.encode(['address', 'address', 'bytes'], [poolImplAddr, admin, poolData]);\n  const encodedData = proxyBytecode + initialize.replace('0x', '');\n  return ethers.utils.keccak256(encodedData);\n};\n\nconst getPoolAddress = (\n  borrower,\n  token1,\n  token2,\n  strategy,\n  poolFactory,\n  salt,\n  poolLogic,\n  transferFromSavingsAccount,\n  collateralRatio,\n  borrowRate,\n  repaymentPeriodInSeconds,\n  noOfRepaymentIntervals,\n  initialCollateralDeposit,\n  poolSize,\n  minborrowAmount,\n  matchCollateralRatioInterval,\n  collectionPeriod,\n) => {\n  const poolData = _interface.encodeFunctionData(initializeFragement, [\n    poolSize, // _poolSize,\n    minborrowAmount, // _minborrowAmount,\n    borrower,\n    token1,\n    token2,\n    collateralRatio, // _collateralRatio\n    borrowRate, // _borrowRate\n    repaymentPeriodInSeconds, // _repaymentInterval\n    noOfRepaymentIntervals, // _noOfRepaymentIntervals\n    strategy,\n    initialCollateralDeposit, // _collateralAmount\n    transferFromSavingsAccount,\n    matchCollateralRatioInterval, // _matchCollateralRatioInterval\n    collectionPeriod, // _collectionPeriod\n  ]);\n\n  console.log('poolData', poolData, poolFactory, getSalt(borrower, salt));\n\n  const poolAddress = ethers.utils.getCreate2Address(\n    poolFactory,\n    getSalt(borrower, salt),\n    getInitCodehash(proxyMeta.bytecode, poolLogic, poolData, '0x0000000000000000000000000000000000000001'),\n  );\n  return poolAddress;\n};\n\nconst onCreatePool = (hash, callback) => {\n  const onCreateInterval = setInterval(async () => {\n    web3.eth.getTransactionReceipt(hash).then((txReceipt) => {\n      if (txReceipt?.status === true) {\n        clearInterval(onCreateInterval);\n\n        console.log('true TXRECEIPT', txReceipt);\n        callback({ success: true });\n      } else if (txReceipt?.status === false) {\n        console.log('false TXRECEIPT', txReceipt);\n      }\n    });\n  }, 5000);\n};\n\nexport async function createOpenBorrowPool(depositData, callback) {\n  const onSuccess = async (poolDetails) => {\n    try {\n      const { collectionPeriod, matchCollateralRatioInterval } = poolDetails;\n\n      const timestamp = new Date().getTime();\n      const address = await window.sessionStorage.getItem('address');\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      // const chainId = provider.provider[\"networkVersion\"]\n\n      const poolFactory = getConfiguredAddress('poolFactory');\n      const poolLogic = getConfiguredAddress('pool');\n\n      const signer = provider.getSigner();\n\n      var contract = new web3.eth.Contract(poolContract, poolFactory);\n      var erc20contract = new web3.eth.Contract(ecr20abi, depositData.CollateralToken);\n\n      let numberOfSecondsInWeek = 60 * 60 * 24 * 7;\n      let repaymentPeriodInSeconds = (parseInt(depositData.repaymentPeriod.split(' ')[0], 10) * numberOfSecondsInWeek).toString();\n      let balance = await signer.getBalance();\n      // contract = contract.connect(signer);\n      let borrower = await signer.getAddress();\n      let borrowAmount = depositData.borrowAmount.toString().toString();\n      var minborrowAmount = (60 / 100) * borrowAmount;\n      let collateral = Number(depositData.requiredCollateral).toFixed(18);\n      let initialCollateralDeposit = ethers.utils.parseUnits(collateral.toString()).toString();\n\n      const loanPeriodInSeconds = (parseInt(depositData.loanPeriod.split(' ')[0], 10) * numberOfSecondsInWeek).toString();\n      const noOfRepaymentIntervals = Math.ceil(loanPeriodInSeconds / repaymentPeriodInSeconds).toString();\n      const collateralRatio = depositData.collaterizationRatio * 10 ** 8;\n      const borrowRate = (depositData.interestRate * 10 ** 8).toString();\n      const salt = ethers.utils.formatBytes32String(timestamp.toString());\n\n      const poolAddress = await getPoolAddress(\n        address,\n        depositData.borrowToken,\n        depositData.CollateralToken,\n        '0x0000000000000000000000000000000000000000',\n        poolFactory,\n        salt,\n        poolLogic,\n        false,\n        collateralRatio,\n        borrowRate,\n        repaymentPeriodInSeconds,\n        noOfRepaymentIntervals,\n        initialCollateralDeposit,\n        borrowAmount,\n        minborrowAmount,\n        matchCollateralRatioInterval,\n        collectionPeriod,\n      );\n\n      localStorage.setItem('poolAddress', poolAddress);\n\n      console.log('borrowToken', depositData.borrowToken);\n      console.log('CollateralToken', depositData.CollateralToken);\n      console.log('poolAddress', poolAddress);\n      console.log('salt in createPool', salt);\n      const amount = BigNumber.from(initialCollateralDeposit); // static 185014322501600\n\n      await erc20contract.methods.approve(poolAddress, amount).send({ from: address }, async (error, receipt) => {\n        if (error) {\n          callback({ error: true, message: error.message });\n          return;\n        }\n\n        const interval = setInterval(async () => {\n          web3.eth.getTransactionReceipt(receipt).then(async (txReceipt) => {\n            if (txReceipt?.status === true) {\n              clearInterval(interval);\n\n              const isAllowed = await erc20contract.methods.allowance(address, poolAddress).call();\n              console.log('isAllowed', isAllowed);\n\n              await contract.methods\n                .createPool(\n                  borrowAmount, // pool size\n                  minborrowAmount,\n                  depositData.borrowToken,\n                  depositData.CollateralToken,\n                  collateralRatio,\n                  borrowRate,\n                  repaymentPeriodInSeconds,\n                  noOfRepaymentIntervals,\n                  '0x0000000000000000000000000000000000000000',\n                  initialCollateralDeposit,\n                  false,\n                  salt,\n                  // borrowerTransactionConfig\n                )\n                .send({ from: address }, function async(err, res) {\n                  if (err) {\n                    callback({ error: true, message: err.message });\n                    return;\n                  }\n                  if (res) {\n                    console.log('HASH', res);\n                    onCreatePool(res, callback);\n                  }\n                });\n            } else if (txReceipt?.status === false) {\n              console.log('approve false TXRECEIPT', txReceipt);\n            }\n          });\n        }, 5000);\n      });\n    } catch (error) {\n      if (error.message.includes('User denied transaction')) {\n        callback({ error: true, message: error.message });\n      } else {\n        callback({ error: true, message: 'Invalid values entered.' });\n      }\n    }\n  };\n\n  await getGlobalPoolDetail(onSuccess, callback);\n}\n"]},"metadata":{},"sourceType":"module"}