{"ast":null,"code":"import { ethers } from 'ethers';\nimport { BigNumber } from '@ethersproject/bignumber';\nconst creditLineAddress = '0xB642a5877Eb6511D75BdD0Bb9e4d31E251f99729';\n\nconst creditLineContract = require('../../abi/creditLine.json');\n\nexport async function requestCreditLineLender(args) {\n  const {\n    lenderAddress,\n    borrowLimit,\n    liquidationThreshold,\n    borrowRate,\n    autoLiquidation,\n    collateralRatio,\n    borrowAsset,\n    collateralAsset\n  } = args;\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  let contract = new ethers.Contract(creditLineAddress, creditLineContract, provider);\n  console.log('requestCreditLineLender: ', JSON.stringify(args, null, 2));\n  console.log('contract: ', contract);\n  let balance = await signer.getBalance();\n  console.log('balance: ', balance);\n  contract = contract.connect(signer); // let borrower = await signer.getAddress();\n  // console.log(\"borrower: \", borrower);\n\n  const borrowerTransactionConfig = {\n    // from: borrower,  // not required, automatically takes signer's account address\n    gasPrice: '1000000000'\n  };\n  const res = await contract.requestCreditLineToLender(lenderAddress, BigNumber.from(borrowLimit).mul(BigNumber.from(10).pow(18)), BigNumber.from(liquidationThreshold).mul(BigNumber.from(10).pow(30)), BigNumber.from(borrowRate).mul(BigNumber.from(10).pow(29)), autoLiquidation, BigNumber.from(collateralRatio).mul(BigNumber.from(10).pow(29)), borrowAsset, collateralAsset);\n  console.log('res: ', res);\n  const txn = await res.wait();\n  console.log('txn: ', txn);\n  return txn.transactionHash;\n}","map":{"version":3,"sources":["/Users/ritikdutta/Desktop/sublime-frontend/src/contractTranscations/creditLine/creditLineRequest.ts"],"names":["ethers","BigNumber","creditLineAddress","creditLineContract","require","requestCreditLineLender","args","lenderAddress","borrowLimit","liquidationThreshold","borrowRate","autoLiquidation","collateralRatio","borrowAsset","collateralAsset","provider","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","console","log","JSON","stringify","balance","getBalance","connect","borrowerTransactionConfig","gasPrice","res","requestCreditLineToLender","from","mul","pow","txn","wait","transactionHash"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,MAAMC,iBAAiB,GAAG,4CAA1B;;AACA,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,2BAAD,CAAlC;;AAkBA,OAAO,eAAeC,uBAAf,CAAuCC,IAAvC,EAAoE;AACzE,QAAM;AACJC,IAAAA,aADI;AAEJC,IAAAA,WAFI;AAGJC,IAAAA,oBAHI;AAIJC,IAAAA,UAJI;AAKJC,IAAAA,eALI;AAMJC,IAAAA,eANI;AAOJC,IAAAA,WAPI;AAQJC,IAAAA;AARI,MASFR,IATJ;AAUA,QAAMS,QAAQ,GAAG,IAAIf,MAAM,CAACgB,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,CAAjB;AACA,QAAMC,MAAM,GAAGL,QAAQ,CAACM,SAAT,EAAf;AACA,MAAIC,QAAQ,GAAG,IAAItB,MAAM,CAACuB,QAAX,CACbrB,iBADa,EAEbC,kBAFa,EAGbY,QAHa,CAAf;AAKAS,EAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCC,IAAI,CAACC,SAAL,CAAerB,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAzC;AACAkB,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BH,QAA1B;AACA,MAAIM,OAAO,GAAG,MAAMR,MAAM,CAACS,UAAP,EAApB;AACAL,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBG,OAAzB;AACAN,EAAAA,QAAQ,GAAGA,QAAQ,CAACQ,OAAT,CAAiBV,MAAjB,CAAX,CAtByE,CAwBzE;AACA;;AAEA,QAAMW,yBAAyB,GAAG;AAChC;AACAC,IAAAA,QAAQ,EAAE;AAFsB,GAAlC;AAKA,QAAMC,GAAG,GAAG,MAAMX,QAAQ,CAACY,yBAAT,CAChB3B,aADgB,EAEhBN,SAAS,CAACkC,IAAV,CAAe3B,WAAf,EAA4B4B,GAA5B,CAAgCnC,SAAS,CAACkC,IAAV,CAAe,EAAf,EAAmBE,GAAnB,CAAuB,EAAvB,CAAhC,CAFgB,EAGhBpC,SAAS,CAACkC,IAAV,CAAe1B,oBAAf,EAAqC2B,GAArC,CAAyCnC,SAAS,CAACkC,IAAV,CAAe,EAAf,EAAmBE,GAAnB,CAAuB,EAAvB,CAAzC,CAHgB,EAIhBpC,SAAS,CAACkC,IAAV,CAAezB,UAAf,EAA2B0B,GAA3B,CAA+BnC,SAAS,CAACkC,IAAV,CAAe,EAAf,EAAmBE,GAAnB,CAAuB,EAAvB,CAA/B,CAJgB,EAKhB1B,eALgB,EAMhBV,SAAS,CAACkC,IAAV,CAAevB,eAAf,EAAgCwB,GAAhC,CAAoCnC,SAAS,CAACkC,IAAV,CAAe,EAAf,EAAmBE,GAAnB,CAAuB,EAAvB,CAApC,CANgB,EAOhBxB,WAPgB,EAQhBC,eARgB,CAAlB;AAWAU,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBQ,GAArB;AACA,QAAMK,GAAG,GAAG,MAAML,GAAG,CAACM,IAAJ,EAAlB;AACAf,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBa,GAArB;AACA,SAAOA,GAAG,CAACE,eAAX;AACD","sourcesContent":["import { ethers } from 'ethers';\nimport { BigNumber } from '@ethersproject/bignumber';\nconst creditLineAddress = '0xB642a5877Eb6511D75BdD0Bb9e4d31E251f99729';\nconst creditLineContract = require('../../abi/creditLine.json');\n\ndeclare global {\n  interface Window {\n    ethereum: ethers.providers.ExternalProvider;\n  }\n}\n\nexport interface CreditLineRequestArgs {\n  lenderAddress: string;\n  borrowLimit: BigNumber;\n  liquidationThreshold: BigNumber;\n  borrowRate: BigNumber;\n  autoLiquidation: boolean;\n  collateralRatio: BigNumber;\n  borrowAsset: string;\n  collateralAsset: string;\n}\nexport async function requestCreditLineLender(args: CreditLineRequestArgs) {\n  const {\n    lenderAddress,\n    borrowLimit,\n    liquidationThreshold,\n    borrowRate,\n    autoLiquidation,\n    collateralRatio,\n    borrowAsset,\n    collateralAsset,\n  } = args;\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  let contract = new ethers.Contract(\n    creditLineAddress,\n    creditLineContract,\n    provider,\n  );\n  console.log('requestCreditLineLender: ', JSON.stringify(args, null, 2));\n  console.log('contract: ', contract);\n  let balance = await signer.getBalance();\n  console.log('balance: ', balance);\n  contract = contract.connect(signer);\n\n  // let borrower = await signer.getAddress();\n  // console.log(\"borrower: \", borrower);\n\n  const borrowerTransactionConfig = {\n    // from: borrower,  // not required, automatically takes signer's account address\n    gasPrice: '1000000000',\n  };\n\n  const res = await contract.requestCreditLineToLender(\n    lenderAddress,\n    BigNumber.from(borrowLimit).mul(BigNumber.from(10).pow(18)),\n    BigNumber.from(liquidationThreshold).mul(BigNumber.from(10).pow(30)),\n    BigNumber.from(borrowRate).mul(BigNumber.from(10).pow(29)),\n    autoLiquidation,\n    BigNumber.from(collateralRatio).mul(BigNumber.from(10).pow(29)),\n    borrowAsset,\n    collateralAsset,\n  );\n\n  console.log('res: ', res);\n  const txn = await res.wait();\n  console.log('txn: ', txn);\n  return txn.transactionHash;\n}\n"]},"metadata":{},"sourceType":"module"}