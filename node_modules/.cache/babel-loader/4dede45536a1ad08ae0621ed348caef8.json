{"ast":null,"code":"import { ethers } from \"ethers\";\nconst creditLineAddress = \"0xB642a5877Eb6511D75BdD0Bb9e4d31E251f99729\";\n\nconst creditLineContract = require(\"../../abi/creditLine.json\");\n\nexport async function requestCreditLineLender(lenderAddress, borrowLimit, liquidationThreshold, borrowRate, autoLiquidation, collateralRatio, borrowAsset, collateralAsset) {\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  var contract = new ethers.Contract(creditLineAddress, creditLineContract, provider);\n  console.log(\"contract: \", contract);\n  let balance = await signer.getBalance();\n  console.log(\"balance: \", balance);\n  contract = contract.connect(signer); // let borrower = await signer.getAddress();\n  // console.log(\"borrower: \", borrower);\n\n  const borrowerTransactionConfig = {\n    // from: borrower,  // not required, automatically takes signer's account address\n    gasPrice: \"1000000000\"\n  };\n  const res = await contract.requestCreditLineToLender(lenderAddress, borrowLimit, liquidationThreshold, borrowRate, autoLiquidation, collateralRatio, borrowAsset, collateralAsset, borrowerTransactionConfig);\n  console.log(\"res: \", res);\n  const txn = await res.wait();\n  console.log(\"txn: \", txn); // await contract.functions\n  //   .requestCreditLineToLender(\n  //     lenderAddress,\n  //     borrowLimit,\n  //     liquidationThreshold,\n  //     borrowRate,\n  //     autoLiquidation,\n  //     collateralRatio,\n  //     borrowAsset,\n  //     collateralAsset,\n  //     borrowerTransactionConfig\n  //   )\n  //   .then(console.log);\n\n  return txn.transactionHash;\n}","map":{"version":3,"sources":["/Users/ritikdutta/Desktop/sublime-frontend/src/contractTranscations/creditLine/creditLineRequest.js"],"names":["ethers","creditLineAddress","creditLineContract","require","requestCreditLineLender","lenderAddress","borrowLimit","liquidationThreshold","borrowRate","autoLiquidation","collateralRatio","borrowAsset","collateralAsset","provider","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","console","log","balance","getBalance","connect","borrowerTransactionConfig","gasPrice","res","requestCreditLineToLender","txn","wait","transactionHash"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AAEA,MAAMC,iBAAiB,GAAG,4CAA1B;;AACA,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,2BAAD,CAAlC;;AAGA,OAAO,eAAeC,uBAAf,CACLC,aADK,EAELC,WAFK,EAGLC,oBAHK,EAILC,UAJK,EAKLC,eALK,EAMLC,eANK,EAOLC,WAPK,EAQLC,eARK,EASL;AACA,QAAMC,QAAQ,GAAG,IAAIb,MAAM,CAACc,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,CAAjB;AACA,QAAMC,MAAM,GAAGL,QAAQ,CAACM,SAAT,EAAf;AACA,MAAIC,QAAQ,GAAG,IAAIpB,MAAM,CAACqB,QAAX,CAAoBpB,iBAApB,EAAuCC,kBAAvC,EAA2DW,QAA3D,CAAf;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BH,QAA1B;AACA,MAAII,OAAO,GAAG,MAAMN,MAAM,CAACO,UAAP,EAApB;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBC,OAAzB;AACAJ,EAAAA,QAAQ,GAAGA,QAAQ,CAACM,OAAT,CAAiBR,MAAjB,CAAX,CAPA,CAQA;AACA;;AAEA,QAAMS,yBAAyB,GAAG;AAChC;AACAC,IAAAA,QAAQ,EAAE;AAFsB,GAAlC;AAIA,QAAMC,GAAG,GAAG,MAAMT,QAAQ,CAACU,yBAAT,CAAmCzB,aAAnC,EAAkDC,WAAlD,EAA+DC,oBAA/D,EAAqFC,UAArF,EAAiGC,eAAjG,EAAkHC,eAAlH,EAAmIC,WAAnI,EAAgJC,eAAhJ,EAAiKe,yBAAjK,CAAlB;AACAL,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBM,GAArB;AACA,QAAME,GAAG,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAlB;AACAV,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBQ,GAArB,EAlBA,CAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAOA,GAAG,CAACE,eAAX;AACD","sourcesContent":["import { ethers } from \"ethers\";\n\nconst creditLineAddress = \"0xB642a5877Eb6511D75BdD0Bb9e4d31E251f99729\";\nconst creditLineContract = require(\"../../abi/creditLine.json\");\n\n\nexport async function requestCreditLineLender(\n  lenderAddress,\n  borrowLimit,\n  liquidationThreshold,\n  borrowRate,\n  autoLiquidation,\n  collateralRatio,\n  borrowAsset,\n  collateralAsset\n) {\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  var contract = new ethers.Contract(creditLineAddress, creditLineContract, provider);\n  console.log(\"contract: \", contract);\n  let balance = await signer.getBalance();\n  console.log(\"balance: \", balance);\n  contract = contract.connect(signer);\n  // let borrower = await signer.getAddress();\n  // console.log(\"borrower: \", borrower);\n\n  const borrowerTransactionConfig = {\n    // from: borrower,  // not required, automatically takes signer's account address\n    gasPrice: \"1000000000\",\n  };\n  const res = await contract.requestCreditLineToLender(lenderAddress, borrowLimit, liquidationThreshold, borrowRate, autoLiquidation, collateralRatio, borrowAsset, collateralAsset, borrowerTransactionConfig);\n  console.log(\"res: \", res);\n  const txn = await res.wait();\n  console.log(\"txn: \", txn);\n  // await contract.functions\n  //   .requestCreditLineToLender(\n  //     lenderAddress,\n  //     borrowLimit,\n  //     liquidationThreshold,\n  //     borrowRate,\n  //     autoLiquidation,\n  //     collateralRatio,\n  //     borrowAsset,\n  //     collateralAsset,\n  //     borrowerTransactionConfig\n  //   )\n  //   .then(console.log);\n  return txn.transactionHash;\n}\n"]},"metadata":{},"sourceType":"module"}