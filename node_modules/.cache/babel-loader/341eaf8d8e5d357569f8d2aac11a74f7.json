{"ast":null,"code":"import request from 'request';\nimport { getSymbol } from './../../utility/symbol';\nimport { getLoanStartDay, countdown } from './../../utility/time';\nimport { ethers } from 'ethers';\nimport { SUBGRAPH_API_URL } from '../../utility/constants';\nimport { getSupportedTokens } from '../../utility/functions';\nexport function lendMoreDetailPools(address, setpooldata) {\n  let result;\n  const data = JSON.stringify({\n    query: `  {\n            pools(where:{id:\"${address}\"}) {\n              id\n              idealCollateralRatio\n              borrowAmountRequested\n              collateralAsset\n              borrowAsset\n              borrowRate\n              borrowAmountRequested\n              lentAmount\n              loanStartTime\n              repaymentInterval\n              published\n              noOfRepaymentIntervals\n              borrower{\n                id \n                twitterDetails{\n                    twitterId\n                }\n              }\n            }\n          }\n        \n          `\n  });\n  var options = {\n    method: 'POST',\n    url: SUBGRAPH_API_URL,\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: data\n  };\n  result = request(options, async function (error, response) {\n    if (error) throw new Error(error);\n    var body = JSON.parse(response.body);\n    var pools = [];\n\n    if (body) {\n      if (body.data) {\n        if (body.data.pools && body.data.pools.length > 0) {\n          if (body.data.pools[0]) {\n            let poolData = body.data.pools[0];\n            let name = 'user name';\n\n            try {\n              name = ethers.utils.parseBytes32String(poolData.borrower.twitterDetails.twitterId);\n            } catch (error) {}\n\n            let BorrowAssest = {\n              value: ''\n            };\n            const collateralAsset = getSupportedTokens('collateralTokens').find(token => token.address.toLowerCase() === poolData.collateralAsset.toLowerCase());\n            const asset = getSupportedTokens('borrowTokens').find(token => token.address.toLowerCase() === poolData.borrowAsset.toLowerCase());\n\n            if (asset) {\n              BorrowAssest = asset;\n            }\n\n            var pool = {\n              collateralRatio: poolData.idealCollateralRatio / 10 ** 8 + '%',\n              borrowed_amount: poolData.borrowAmountRequested / 10 ** 18 + ' ' + BorrowAssest.value,\n              collateralAssest: collateralAsset,\n              BorrowAssest,\n              borrowRate: poolData.borrowRate / 10 ** 8 + '%',\n              collectionProgress: Math.floor(poolData.lentAmount * 100 / poolData.borrowAmountRequested) + '%',\n              collectionEnds: getLoanStartDay(poolData.loanStartTime),\n              RepaymentFrequency: countdown(poolData.repaymentInterval),\n              publishedDate: new Date(parseInt(poolData.published) * 1000),\n              LoanPeriod: countdown(poolData.repaymentInterval * poolData.noOfRepaymentIntervals),\n              name,\n              username: `@${name}`\n            };\n            setpooldata(pool);\n          }\n        }\n      }\n    }\n  });\n}","map":{"version":3,"sources":["/Users/ritikdutta/Desktop/SUBLIME/sublime-frontend/src/query/pool/lendPoolDetail.js"],"names":["request","getSymbol","getLoanStartDay","countdown","ethers","SUBGRAPH_API_URL","getSupportedTokens","lendMoreDetailPools","address","setpooldata","result","data","JSON","stringify","query","options","method","url","headers","body","error","response","Error","parse","pools","length","poolData","name","utils","parseBytes32String","borrower","twitterDetails","twitterId","BorrowAssest","value","collateralAsset","find","token","toLowerCase","asset","borrowAsset","pool","collateralRatio","idealCollateralRatio","borrowed_amount","borrowAmountRequested","collateralAssest","borrowRate","collectionProgress","Math","floor","lentAmount","collectionEnds","loanStartTime","RepaymentFrequency","repaymentInterval","publishedDate","Date","parseInt","published","LoanPeriod","noOfRepaymentIntervals","username"],"mappings":"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","sourcesContent":["import request from 'request';\nimport { getSymbol } from './../../utility/symbol';\nimport { getLoanStartDay, countdown } from './../../utility/time';\nimport { ethers } from 'ethers';\nimport { SUBGRAPH_API_URL } from '../../utility/constants';\nimport { getSupportedTokens } from '../../utility/functions';\n\nexport function lendMoreDetailPools(address, setpooldata) {\n  let result;\n  const data = JSON.stringify({\n    query: `  {\n            pools(where:{id:\"${address}\"}) {\n              id\n              idealCollateralRatio\n              borrowAmountRequested\n              collateralAsset\n              borrowAsset\n              borrowRate\n              borrowAmountRequested\n              lentAmount\n              loanStartTime\n              repaymentInterval\n              published\n              noOfRepaymentIntervals\n              borrower{\n                id \n                twitterDetails{\n                    twitterId\n                }\n              }\n            }\n          }\n        \n          `,\n  });\n\n  var options = {\n    method: 'POST',\n    url: SUBGRAPH_API_URL,\n    headers: { 'Content-Type': 'application/json' },\n    body: data,\n  };\n\n  result = request(options, async function (error, response) {\n    if (error) throw new Error(error);\n    var body = JSON.parse(response.body);\n    var pools = [];\n    if (body) {\n      if (body.data) {\n        if (body.data.pools && body.data.pools.length > 0) {\n          if (body.data.pools[0]) {\n            let poolData = body.data.pools[0];\n            let name = 'user name';\n            try {\n              name = ethers.utils.parseBytes32String(poolData.borrower.twitterDetails.twitterId);\n            } catch (error) {}\n            let BorrowAssest = { value: '' };\n            const collateralAsset = getSupportedTokens('collateralTokens').find(\n              (token) => token.address.toLowerCase() === poolData.collateralAsset.toLowerCase(),\n            );\n            const asset = getSupportedTokens('borrowTokens').find((token) => token.address.toLowerCase() === poolData.borrowAsset.toLowerCase());\n            if (asset) {\n              BorrowAssest = asset;\n            }\n            var pool = {\n              collateralRatio: poolData.idealCollateralRatio / 10 ** 8 + '%',\n              borrowed_amount: poolData.borrowAmountRequested / 10 ** 18 + ' ' + BorrowAssest.value,\n              collateralAssest: collateralAsset,\n              BorrowAssest,\n              borrowRate: poolData.borrowRate / 10 ** 8 + '%',\n              collectionProgress: Math.floor((poolData.lentAmount * 100) / poolData.borrowAmountRequested) + '%',\n              collectionEnds: getLoanStartDay(poolData.loanStartTime),\n              RepaymentFrequency: countdown(poolData.repaymentInterval),\n              publishedDate: new Date(parseInt(poolData.published) * 1000),\n              LoanPeriod: countdown(poolData.repaymentInterval * poolData.noOfRepaymentIntervals),\n              name,\n              username: `@${name}`,\n            };\n            setpooldata(pool);\n          }\n        }\n      }\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}